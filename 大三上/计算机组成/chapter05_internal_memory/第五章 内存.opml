<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <dateModified></dateModified>
    <ownerName></ownerName>
  </head>
  <body>
<outline text="第五章 内部存储器" _note="**keypoints**&#10;&#10;&gt; Differences between SRAM and DRAM?&#10;&gt;&#10;&gt; Comparing EPROM and Flash memory!&#10;&gt;&#10;&gt; What is SDRAM? what applications need it?&#10;&gt;&#10;&gt; Parallel DRAM techniques">
  <outline text="5.1 半导体主存储器">
    <outline text="5.1.1 组织" _note="所有的半导体存储位元都有相似的性质：&#10;&#10;&gt; 呈现两种稳态(或半稳态),分别代表二进制的1和0;  &#10;&gt; 能够写入信息(至少一次)来设置状态;  &#10;&gt; 能够读出状态信息。&#10;&#10;![](https://note-image-1307786938.cos.ap-beijing.myqcloud.com/typora/qshell/image-20211102142641622.png)">
    </outline>
    <outline text="5.1.2 DRAM与SRAM" _note="随机存取：通过编排的寻址逻辑，存储器的单个字直接被存取&#10;&#10;**RAM**:随机存取存储器，可以方便的从存储器读取数据和向存储器写入新数据，且读写操作都是通过使用电信号来完成的。同时具有易失性，一旦断电，数据就会丢失。">
      <outline text="DRAM" _note="**动态随机存储器**：通过电容充电来存储数据，一个半导体器件存储一位二进制，位元中的电容有、无电荷分别表示二进制的1、0.&#10;&#10;因为电容会漏电的趋势，因此DRAM需要周期性充电刷新，甚至在有电的时候也要充&#10;&#10;对于下图，当有电压施加到地址线上，晶体管导通；否则晶体管开路&#10;&#10;![](C:\Users\易俊泉\AppData\Roaming\Typora\typora-user-images\image-20211015103546453.png)">
        <outline text="写操作" _note="&gt; 电压信号施加到位线上：高电压为1，低电压为0；然后一个信号施加到地址线，允许电荷传输到电容器">
        </outline>
        <outline text="读操作" _note="&gt; 当地址线被选中，晶体管导通，存储在电容上的电荷被送出到位线和读出放大器。读出放大器将此电容电压与一个参考值比较，确定位元保存的是1还是0，位元读出放掉了电容上的电荷，需要重新存储才算结束。&#10;&#10;比较慢，适用于主存">
        </outline>
      </outline>
      <outline text="SDRAM" _note="**静态随机存储器**：通过触发器存储数据，不需要刷新充电。每一位需要6位MOS，所以更复杂、更昂贵。&#10;&#10;因为不用刷新，因此也更快，适用于cache&#10;&#10;![](C:\Users\易俊泉\AppData\Roaming\Typora\typora-user-images\image-20211015103633809.png)">
      </outline>
      <outline text="二者比较" _note="&gt; 逻辑1：C1高电位，C2低电位，T1,T4关闭，T2,T3打开&#10;&gt;&#10;&gt; 逻辑0：C2低电位，C1高电位，T2,T3打开，T1,T4关闭">
        <outline text="读写操作" _note="&gt; 写操作：位值施加到B线，位值的反施加到B非线&#10;&gt;&#10;&gt; 读操作：位值从B线读取">
        </outline>
      </outline>
      <outline text="SRAM与DRAM比较" _note="**二者都不稳定**&#10;&#10;&gt; 都需要持续充电去保存数据&#10;&#10;**动态**&#10;&#10;&gt; 更密集、更便宜、需要刷新、适用于更大的存储单元&#10;&#10;**静态**&#10;&#10;&gt; 更快，适用于缓存">
      </outline>
    </outline>
    <outline text="5.1.3 ROM类型" _note="ROM，即只读存储器，含有不能改变的永久性数据，掉电以后数据还在。&#10;&#10;有一个MOS管代表&quot;1&quot;，没有MOS管代表&quot;0&quot;。&#10;&#10;存在两个问题&#10;&#10;&gt; 固化数据需要较大的固化成本，不管是一片还是上千片&#10;&gt;&#10;&gt; 无出错机会，一位出错，整批销毁">
      <outline text="PROM" _note="即**可编程ROM**，需要用特殊设备来完成写(&quot;编程&quot;)，灵活性高，但是价格也高">
      </outline>
      <outline text="EPROM" _note="**光可擦除只读存储器**。写入操作前，需要让芯片暴露在紫外线辐照下使所有的存储位元都被擦除，还原为初始状态，可重复进行，需要20分钟以上。&#10;&#10;可以修改多次，也能长久保存出局，更贵，集成度较低">
      </outline>
      <outline text="EEPROM" _note="**电可擦除只读存储器**。只需要修改想要改的部分，不用全部都初始化。写操作比读操作长的多，而且**更贵**">
      </outline>
      <outline text="快闪存储器flash memory" _note="使用电擦除技术，价格与功能介于EPROM与EEPROM之间&#10;&#10;能够擦除存储器中的某些块，而不是整块芯片&#10;&#10;包括NOR与NAND，NAND比更适用于外存，比如U盘&#10;&#10;![](https://note-image-1307786938.cos.ap-beijing.myqcloud.com/typora/qshell/image-20211015105816853.png)">
      </outline>
    </outline>
    <outline text="5.1.4 芯片逻辑" _note="半导体存储器也是封装的芯片，每块芯片包含一组存储位元阵列&#10;&#10;![](https://note-image-1307786938.cos.ap-beijing.myqcloud.com/typora/qshell/image-20211015112343148.png)">
    </outline>
    <outline text="5.1.5 芯片封装" _note="">
    </outline>
    <outline text="5.1.6 模块组织" _note="![](https://note-image-1307786938.cos.ap-beijing.myqcloud.com/typora/qshell/image-20211015113208887.png)">
      <outline text="存储器扩充（考研点)" _note="1️⃣ 1kx4 -&gt; 1kx8 字长扩展&#10;&#10;![](https://note-image-1307786938.cos.ap-beijing.myqcloud.com/typora/qshell/image-20211015114337344.png)&#10;&#10;CS：选中信号端 A0~An：地址线 D0~Dn：数据线&#10;&#10;图中的芯片进行了扩展，地址线不变，都是10位，数据线进行了扩展，由4位扩展成了8位&#10;&#10;2️⃣ 1kx8-&gt; 2kx8 字数扩展&#10;&#10;![](https://note-image-1307786938.cos.ap-beijing.myqcloud.com/typora/qshell/image-20211015114413227.png)&#10;&#10;高位做片选比较方便&#10;&#10;3️⃣ 1kx4-&gt; 4kx8&#10;&#10;先1kx4-&gt;1kx8再1kx8-&gt;4kx8&#10;&#10;![](https://note-image-1307786938.cos.ap-beijing.myqcloud.com/typora/qshell/image-20211015114901716.png)&#10;&#10;2-4译码器保证了每一次只有一个芯片有效">
        <outline text="存储器与内存的连接" _note="解题过程&#10;&#10;&gt; 1️⃣ **正确选择芯片类型和编号**&#10;&gt;&#10;&gt; &gt; ROM用于系统区域&#10;&gt; &gt;&#10;&gt; &gt; RAM用于用户区域&#10;&gt;&#10;&gt; 2️⃣ **地址线连接**&#10;&gt;&#10;&gt; &gt; CPU 的地址行通常比内存的多&#10;&gt; &gt;&#10;&gt; &gt; 低位 = 低位&#10;&gt; &gt;&#10;&gt; &gt; 用于 CS 的高位&#10;&gt;&#10;&gt; 3️⃣ **CPU 数据线连接**&#10;&gt;&#10;&gt; &gt; CPU 的数据线必须等于内存的数据位，如有必要，芯片位将放大&#10;&gt;&#10;&gt; 4️⃣ **连接命令线**&#10;&gt;&#10;&gt; &gt; 读/写行与内存行直接连接 CS 与 MREQ 和 CPU 的高地址位相连&#10;&gt; &gt; 可使用逻辑电路，如解码器">
        </outline>
        <outline text="CPU-存储器举例" _note="&gt; Suppose CPU has 16 address lines, 8 data lines. MREQ is used for&#10;&gt; access memory control, WR is read/write cont&#10;&gt;&#10;&gt; •1Kx4 RAM; 4K x8 RAM; 8K x8 RAM;&#10;&gt;&#10;&gt; •2K x8 ROM; 4K x8 ROM; 8K x8 ROM;&#10;&gt;&#10;&gt; •74LS138 decoder and all kinds of gates, as figure.&#10;&gt;&#10;&gt; •Please draw the diagram of CPU connecting memory, conditions:&#10;&gt;&#10;&gt; 1.  6000H~67FFH is system area; 6800H~6BFFH is user area;&#10;&gt;&#10;&gt; 2.  select reasonable chips, how many chips used, respectively？&#10;&gt;&#10;&gt; rol. Now, we have following chips:">
        </outline>
      </outline>
    </outline>
  </outline>
  <outline text="5.2 纠错" _note="半导体存储系统会出差错&#10;&#10;硬故障hard failure：永久性的物理故障&#10;&#10;软差错soft&#10;error：随机非破坏性事件，可以由电源问题或者*α*粒子引起——可以通过海明码解决，检查2位纠正1位">
  </outline>
  <outline text="5.3 高级DRAM组织">
    <outline text="5.3.1 同步DRAM(SDARM)" _note="传统的DRAM是异步的，SDRAM通过外部的时钟信号实现同步&#10;&#10;由于 SDRAM 会及时与系统时钟移动数据，CPU 知道数据何时可以准备就绪&#10;CPU不必等待，由于latch(插销)它可以做别的事情，&#10;&#10;猝发方式(burst mode)允许SDRAM设置数据流并将其一块方式激发">
    </outline>
    <outline text="5.3.2 Rambus DRAM" _note="使用异步的面向块的协议来传送地址信息和控制信息&#10;&#10;成本较高">
    </outline>
    <outline text="5.3.3 DDR DRAM" _note="SDRAM受限于每个时钟周期仅能发生送一次数据到CPU。双速率SDRAM，能每个时钟周期发送两次数据&#10;&#10;参考博文：https://blog.csdn.net/qq\_46354489/article/details/108903497">
    </outline>
  </outline>
</outline>
  </body>
</opml>
