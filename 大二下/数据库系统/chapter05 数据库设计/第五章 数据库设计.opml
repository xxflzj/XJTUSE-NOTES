<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <dateModified></dateModified>
    <ownerName></ownerName>
  </head>
  <body>
<outline text="[XJTUSE DATABASE]——第五章 数据库设计" _note="**大题分析**">
  <outline text="一、数据库设计概述" _note="数据库设计分6个阶段&#10;&#10;&gt; 需求分析&#10;&gt;&#10;&gt; 概念结构设计&#10;&gt;&#10;&gt; 逻辑结构设计&#10;&gt;&#10;&gt; 物理结构设计&#10;&gt;&#10;&gt; 数据库实施&#10;&gt;&#10;&gt; 数据库运行和维护&#10;&#10;需求分析和概念设计独立于任何数据库管理系统&#10;&#10;逻辑设计和物理设计与选用的数据库管理系统密切相关&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220204221554557.png)">
  </outline>
  <outline text="二、需求分析" _note="详细调查现实世界要处理的对象(组织、部门、 企业等)。&#10;&#10;充分了解原系统(手工系统或计算机系统)工作概况。&#10;&#10;明确用户的各种需求。&#10;&#10;在此基础上确定新系统的功能。&#10;&#10;新系统必须充分考虑今后可能的扩充和改变。">
    <outline text="步骤" _note="1️⃣ 调查清楚用户的实际需求并进行初步分析。&#10;&#10;&gt; 调查组织机构情况。&#10;&gt;&#10;&gt; 调查各部门的业务活动情况。&#10;&gt;&#10;&gt; 协助用户明确对新系统的各种要求，包括信&#10;&gt; 息要求、处理要求、完全性与完整性要求。&#10;&gt;&#10;&gt; 确定新系统的边界。&#10;&#10;2️⃣ 与用户达成共识。&#10;&#10;3️⃣ 分析与表达这些需求。&#10;&#10;&gt; 分析方法&#10;&gt;&#10;&gt; &gt; 结构化分析方法(Structured Analysis，简称SA方法)&#10;&gt; &gt;&#10;&gt; &gt; &gt; SA方法从最上层的系统组织机构入手&#10;&gt; &gt; &gt;&#10;&gt; &gt; &gt; 采用自顶向下、逐层分解的方式分析系统&#10;&gt;&#10;&gt; 对用户需求进行分析与表达后，需求分析报告必须&#10;&gt; 提交给用户，征得用户的认可。">
    </outline>
    <outline text="数据字典" _note="**数据字典的内容**&#10;&#10;&gt; 数据项&#10;&gt;&#10;&gt; 数据结构&#10;&gt;&#10;&gt; 数据流&#10;&gt;&#10;&gt; 数据存储&#10;&gt;&#10;&gt; 处理过程&#10;&#10;**数据项是数据的最小组成单位。**&#10;&#10;若干个数据项可以组成一个数据结构。&#10;&#10;数据字典通过对数据项和数据结构的定义来描述 数据流、数据存储的逻辑内容。">
      <outline text="数据项" _note="&gt; **数据项是不可再分的数据单位**&#10;&gt;&#10;&gt; 数据项描述={数据项名,数据项含义说明,别名,数据类型,长度,取值范围,取值含义,&#10;&gt; 与其他数据项的逻辑关系,数据项之间的联系}&#10;&gt;&#10;&gt; **“取值范围”、“与其他数据项的逻辑关系”定义了数据的完整性约束条件**，是设计&#10;&gt; 数据检验功能的依据。&#10;&gt;&#10;&gt; 可以用关系规范化理论为指导，用数据依赖的概念分析&#10;&gt; 和表示数据项之间的联系**。**">
      </outline>
      <outline text="数据结构" _note="&gt; 数据结构反映了数据之间的组合关系。&#10;&gt;&#10;&gt; 一个数据结构可以由若干个数据项组成，也可以由&#10;&gt; 若干个数据结构组成，或由若干个数据项和数据结 构混合组成。&#10;&gt;&#10;&gt; 数据结构描述 ={数据结构名，含义说明，组成:{数据项或数据结构}}">
      </outline>
      <outline text="数据流" _note="数据流是数据结构在系统内传输的路径。&#10;&#10;数据流描述={数据流名,说明,数据流来源,数据流去向,组成:{数据结构},&#10;平均流量,高峰期流量}&#10;&#10;&gt; 数据流来源：说明该数据流来自哪个过程。&#10;&gt;&#10;&gt; 数据流去向：说明该数据流将到哪个过程去。&#10;&gt;&#10;&gt; 平均流量：在单位时间(每天、每周、每月等)里的传输次数。&#10;&gt;&#10;&gt; 高峰期流量：在高峰时期的数据流量。">
      </outline>
      <outline text="数据存储" _note="数据存储是数据结构停留或保存的地方，也是数据 流的来源和去向之一。&#10;&#10;数据存储描述={数据存储名,说明,编号,输入的数据流 ,输出的数据流,&#10;组成:{数据结构},数据量, 存取频度,存取方式}&#10;&#10;&gt; 存取频度：每小时、每天或每周存取次数，每次存取的 数据量等信息。&#10;&gt;&#10;&gt; 存取方法：批处理 / 联机处理；检索 / 更新；顺序检索 /随机检索。&#10;&gt;&#10;&gt; 输入的数据流：数据来源&#10;&gt;&#10;&gt; 输出的数据流：数据去向">
      </outline>
      <outline text="处理过程" _note="处理过程的具体处理逻辑一般用判定表或判定树来描述。数据字典中只需要描述处理过程的说明性信息。&#10;&#10;处理过程说明性信息的描述&#10;&#10;处理过程描述={处理过程名,说明,输入:{数据流},输出:{数据流},处理:{简要说明}}&#10;&#10;&gt; 简要说明：说明该处理过程的功能及处理要求&#10;&gt;&#10;&gt; 功能：该处理过程用来做什么。&#10;&gt;&#10;&gt; 处理要求：处理频度要求，如单位时间里处理多少事务，多&#10;&gt; 少数据量、响应时间要求等。&#10;&gt;&#10;&gt; 处理要求是后面物理设计的输入及性能评价的标准">
      </outline>
    </outline>
  </outline>
  <outline text="三、概念结构设计" _note="将需求分析得到的用户需求抽象为信息结构(即概&#10;念模型)的过程就是概念结构设计。&#10;&#10;概念模型的特点：&#10;&#10;&gt; 能真实、充分地反映现实世界，是现实世界的一个真 实模型。&#10;&gt;&#10;&gt; 易于理解，从而可以用它和不熟悉计算机的用户交换意见。&#10;&gt;&#10;&gt; 易于更改，当应用环境和应用要求改变时，容易对概 念模型修改和扩充&#10;&gt;&#10;&gt; 易于向关系、网状、层次等各种数据模型转换。&#10;&#10;描述概念模型的工具：**E-R模型**">
    <outline text="实体与属性的划分原则" _note="为了简化E-R图的处置，现实世界的事物能作为属性对待的，尽量作为属性对待。&#10;&#10;两条准则：&#10;&#10;&gt; 1️⃣&#10;&gt; 作为属性，不能再具有需要描述的性质。属性必须是**不可分的数据项**，不能包含其他属性。&#10;&gt;&#10;&gt; 2️⃣&#10;&gt; **属性不能与其他实体具有联系，即E-R图中所表示的联系是实体之间的联系。**&#10;&#10;**示例：职工是一个实体，职工号、姓名、年龄是职工的属性。**&#10;&#10;&gt; **职称如果没有与工资、福利挂钩，根据准则(1)可以作为职工实体的属性**&#10;&gt;&#10;&gt; **如果不同的职称有不同的工资、住房标准和不同的附加福利，则职称作为一个实体更恰当**&#10;&#10;**示例：在医院中，一个病人只能住在一个病房，病房号可以作为病&#10;人实体的一个属性；**&#10;&#10;&gt; **如果病房还要与医生实体发生联系，即一个医生负责几个病房的病人的医疗工作，则根据准则(2)&#10;&gt; 病房应作为一个实体。**&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220204223641836.png)">
      <outline text="设计实例：销售管理子系统E-R图的设计。" _note="该子系统的主要功能是：&#10;&#10;&gt; 处理顾客和销售员送来的订单&#10;&gt;&#10;&gt; 工厂是根据订货安排生产的&#10;&gt;&#10;&gt; 交出货物同时开出发票&#10;&gt;&#10;&gt; 收到顾客付款后，根据发票存根和信贷情况进行应收款处理&#10;&#10;每张订单由订单号、若干头信息和订单细节组成。订单细节又&#10;有订货的零件号、数量等来描述。按照准则(2)，订单细节就不能作订单的属性处理而应该上升为实体。一张订单可以订若干产&#10;品，所以订单与订单细节两个实体之间是1∶n的联系。&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220204224115123.png &quot;fig:&quot;)&#10;&#10;原订单和产品的联系实际上是订单细节和产品的联&#10;系。每条订货细节对应一个产品描述，订单处理时从&#10;中获得当前单价、产品重量等信息。&#10;&#10;工厂对大宗订货给予优惠。每种产品都规定了不同&#10;订货数量的折扣，应增加一个“折扣规则”实体存放&#10;这些信息，而不应把它们放在产品实体中。&#10;&#10;对每个实体定义的属性如下：&#10;&#10;    顾客：{顾客号，顾客名，地址，电话，信贷状况，账目余额}&#10;    订单：{订单号，顾客号，订货项数，订货日期，交货日期，工 种号，生产地点}&#10;    订单细则：{订单号，细则号，零件号，订货数，金额}&#10;    应收账款：{顾客号，订单号，发票号，应收金额，支付日期，&#10;    支付金额，当前余额，货款限额}&#10;    产品：{产品号，产品名，单价，重量}&#10;    折扣规则：{产品号，订货量，折扣}">
      </outline>
    </outline>
    <outline text="ER图的集成" _note="E-R图的集成一般需要分两步：&#10;&#10;&gt; 合并：解决各分E-R图之间的冲突，将分E-R图合并起 来生成初步E-R图。&#10;&gt;&#10;&gt; 修改和重构：消除不必要的冗余，生成基本E-R图。">
      <outline text="合并E-R图，生成初步E-R图" _note="各个局部应用所面向的问题不同，各个子系统的E-R图&#10;之间必定会存在许多不一致的地方，称之为冲突。&#10;&#10;子系统E-R图之间的冲突主要有三类：&#10;&#10;**①** **属性冲突**&#10;&#10;&gt; 属性域冲突，即属性值的类型、取值范围或取值集合不同。&#10;&gt;&#10;&gt; 例如：零件号，有的部门把它定义为整数，有的部门 把它定义为字符型。&#10;&#10;**② 命名冲突**&#10;&#10;**③ 结构冲突**&#10;&#10;&gt; 1️⃣ 情况1：同一对象在不同应用中具有不同的抽象。&#10;&gt;&#10;&gt; &gt; 例如，职工在某一局部应用中被当作实体，而在另一局部应用中则被当作属性。&#10;&gt; &gt;&#10;&gt; &gt; 解决方法：把属性变换为实体或把实体变换为属性，使同一对象具有相同的抽象。&#10;&gt;&#10;&gt; 2️⃣&#10;&gt; 情况2：同一实体在不同子系统的E-R图中所包含的属性个数和属性排列次序不完全相同。&#10;&gt;&#10;&gt; &gt; 解决方法：使该实体的属性取各子系统的E-R图中属性的并集，再适当调整属性的次序。&#10;&gt;&#10;&gt; 3️⃣ 情况3：实体间的联系在不同的E-R图中为不同的类型。&#10;&gt;&#10;&gt; &gt; 实体E1与E2在一个E-R图中是多对多联系，在另一个E-R图中是一对多联系&#10;&gt; &gt;&#10;&gt; &gt; 解决方法：根据应用的语义对实体联系的类型进行综合或调整。">
      </outline>
      <outline text="消除不必要的冗余，设计基本E-R图" _note="所谓冗余的数据是指可由基本数据导出的数据，冗余的联系是指可由其他联系导出的联系。&#10;&#10;消除冗余主要采用分析方法，即以数据字典和数据流图为依据，根据数据字典中关于数据项之间逻辑关系的说明来消除冗余">
      </outline>
    </outline>
  </outline>
  <outline text="四、逻辑结构设计">
    <outline text="逻辑结构设计的任务" _note="**把概念结构设计阶段设计好的基本E-R图转换为与选用数据库管理系统产品所支持的数据模型相符合的逻辑结构。**">
    </outline>
    <outline text="转换内容" _note="E-R图由实体型、实体的属性和实体型之间的联系三个要素组成。&#10;&#10;关系模型的逻辑结构是一组关系模式的集合。&#10;&#10;**将E-R图转换为关系模型：将实体型、实体的属性和实体型之间的联系转化为关系模式。**">
    </outline>
    <outline text="转换原则" _note="一个实体型转换为一个关系模式。&#10;&#10;&gt; 关系的属性：实体的属性&#10;&gt;&#10;&gt; 关系的码：实体的码&#10;&#10;实体型间的联系有以下不同情况&#10;&#10;1️⃣&#10;**一个1:1联系可以转换为一个独立的关系模式，也可以与任意一端对应的关系模式合并。**&#10;&#10;**①** 转换为一个独立的关系模式&#10;&#10;&gt; 关系的属性：与该联系相连的各实体的码以及联系本身的属性&#10;&gt;&#10;&gt; 关系的候选码：每个实体的码均是该关系的候选码&#10;&#10;**②** 与某一端实体对应的关系模式合并&#10;&#10;&gt; 合并后关系的属性：加入对应关系的码和联系本身的属性&#10;&gt;&#10;&gt; 合并后关系的码：不变&#10;&#10;2️⃣&#10;**一个1:n联系可以转换为一个独立的关系模式，也可以与n端对应的关系模式合并。**&#10;&#10;**①** 转换为一个独立的关系模式&#10;&#10;&gt; 关系的属性：与该联系相连的各实体的码以及联系本身的属性。&#10;&gt;&#10;&gt; 关系的码：n端实体的码&#10;&#10;**②** 与n端对应的关系模式合并&#10;&#10;&gt; 合并后关系的属性：在n端关系中加入1端关系的码 和联系本身的属性。&#10;&gt;&#10;&gt; 合并后关系的码：不变。&#10;&gt;&#10;&gt; 可以减少系统中的关系个数，一般情况下更倾向于 采用这种方法&#10;&#10;3️⃣ **一个m:n联系转换为一个关系模式**&#10;&#10;&gt; 关系的属性：与该联系相连的各实体的码以及联系本身的属性&#10;&gt;&#10;&gt; 关系的码：各实体码的组合&#10;&#10;4️⃣ **具有相同码的关系模式可合并**&#10;&#10;目的：减少系统中的关系个数&#10;&#10;合并方法：&#10;&#10;&gt; 将其中一个关系模式的全部属性加入到另一个关 系模式中。&#10;&gt;&#10;&gt; 然后去掉其中的同义属性(可能同名也可能不同名)。&#10;&gt;&#10;&gt; 适当调整属性的次序。">
    </outline>
    <outline text="示例" _note="![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220204225641589.png)&#10;&#10;    部门(部门号，部门名，经理的职工号，…)&#10;    职工(职工号、部门号，职工名，职务，…)&#10;    产品(产品号，产品名，产品组长的职工号，…)&#10;    供应商(供应商号，姓名，…)&#10;    零件(零件号，零件名，…)&#10;    职工工作(职工号，产品号，工作天数，…)&#10;    供应(产品号，供应商号，零件号，供应量)">
    </outline>
  </outline>
  <outline text="五、物理结构设计">
    <outline text="定义" _note="**数据库在物理设备上的存储结构与存取方法称为数据库的物理结构，它依赖于选定的数据库管理系统。**&#10;&#10;**为一个给定的逻辑数据模型选取一个最适合应用要求的物理结构的过程，就是数据库的物理设计**">
    </outline>
    <outline text="步骤" _note="1️⃣ 确定数据库的物理结构&#10;&#10;&gt; 在关系数据库中主要指存取方法和存储结构。&#10;&#10;2️⃣ 对物理结构进行评价&#10;&#10;&gt; 评价的重点是时间和空间效率。&#10;&gt;&#10;&gt; 若评价结果满足原设计要求，则可进入到物理实施阶段。否则，就需要重新设计或修改物理结构，有时&#10;&gt; 甚至要返回逻辑设计阶段修改数据模型。">
    </outline>
    <outline text="准备工作" _note="充分了解应用环境，详细分析要运行的事务，以获得&#10;选择物理数据库设计所需参数。&#10;&#10;充分了解所用关系型数据库管理系统的内部特征，特&#10;别是系统提供的存取方法和存储结构。">
    </outline>
    <outline text="选择物理数据库设计所需参数" _note="1️⃣ 数据库查询事务&#10;&#10;&gt; 查询的关系&#10;&gt;&#10;&gt; 查询条件所涉及的属性&#10;&gt;&#10;&gt; 连接条件所涉及的属性&#10;&gt;&#10;&gt; 查询的投影属性&#10;&#10;2️⃣ 数据更新事务&#10;&#10;&gt; 被更新的关系&#10;&gt;&#10;&gt; 每个关系上的更新操作条件所涉及的属性&#10;&gt;&#10;&gt; 修改操作要改变的属性值&#10;&#10;3️⃣ 每个事务在各关系上运行的频率和性能要求">
    </outline>
    <outline text="数据库管理系统常用存取方法" _note="1️⃣ B+树索引存取方法&#10;&#10;2️⃣ Hash索引存取方法&#10;&#10;3️⃣ 聚簇存取方法&#10;&#10;&gt; 为了提高某个属性(或属性组)的查询速度，把这个&#10;&gt; 或这些属性(称为聚簇码)上具有相同值的元组集中&#10;&gt; 存放在连续的物理块中称为聚簇。&#10;&gt;&#10;&gt; 该属性(或属性组)称为聚簇码(cluster key)&#10;&gt;&#10;&gt; 许多关系型数据库管理系统都提供了聚簇功能&#10;&gt;&#10;&gt; 聚簇存放与聚簇索引的区别&#10;&gt;&#10;&gt; 聚簇索引的适用条件&#10;&gt;&#10;&gt; &gt; 很少对基表进行增删操作&#10;&gt; &gt;&#10;&gt; &gt; 很少对其中的变长列进行修改操作&#10;&gt;&#10;&gt; 聚簇的用途&#10;&gt;&#10;&gt; &gt; 对于某些类型的查询，可以提高查询效率。&#10;&gt; &gt;&#10;&gt; &gt; 提高按聚簇属性进行查询的效率&#10;&gt; &gt;&#10;&gt; &gt; 节省存储空间">
    </outline>
    <outline text="确定数据库的存储结构" _note="确定数据库物理结构主要指确定数据的**存放位置和存储结构**，包括：确定关系、索引、聚簇、日志、&#10;备份等的存储安排和存储结构，确定系统配置等。&#10;&#10;确定数据的存放位置和存储结构要综合考虑**存取时间、存储空间利用率和维护代价**3个方面的因素&#10;&#10;确定数据的**存放位置**基本原则&#10;&#10;&gt; 根据应用情况将易变部分与稳定部分分开存放。&#10;&gt;&#10;&gt; 经常存取部分与存取频率较低部分分开存放。&#10;&#10;**举例**&#10;&#10;&gt; 可以将比较大的表分别放在两个磁盘上，以加快存取速度，这在多用户环境下特别有效。&#10;&gt;&#10;&gt; 可以将日志文件与数据库对象(表、索引等)放在不同的磁盘以改进系统的性能。">
    </outline>
  </outline>
  <outline text="六、数据库的实施和维护" _note="数据的载入和应用程序的调试&#10;&#10;数据库的试运行&#10;&#10;数据库的运行和维护">
  </outline>
  <outline text="七、习题解析" _note="![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220204231014411.png)&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220204231028269.png)&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220204231041679.png)&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220204231054100.png)&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220204231106173.png)&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220204231116977.png)&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220204231210575.png)&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220204231142984.png)&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220204231225276.png)&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220204231235751.png)&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220204231300457.png)">
  </outline>
</outline>
  </body>
</opml>
