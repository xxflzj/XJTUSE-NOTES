<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <dateModified></dateModified>
    <ownerName></ownerName>
  </head>
  <body>
<outline text="[XJTUSE DATABASE]——第九章 数据库完整性">
  <outline text="一、概述" _note="数据库的完整性：**是指数据的正确性和相容性。**&#10;&#10;&gt; 1️⃣ 数据的正确性&#10;&gt;&#10;&gt; &gt; 是指数据是符合现实世界语义，反映了当前实际状况。&#10;&gt;&#10;&gt; 2️⃣ 数据的相容性&#10;&gt;&#10;&gt; &gt; 是指数据库同一对象在不同关系表中的数据是符合逻辑的。&#10;&#10;&gt; 🎨 例如：&#10;&gt;&#10;&gt; 学生的学号必须唯一&#10;&gt;&#10;&gt; 性别只能是男或女&#10;&#10;为维护数据库的完整性，数据库管理系统必须：提供定义**完整性约束条件的机制**&#10;&#10;数据库管理系统中检查数据是否满足完整性约束条件的机制称为完整性检查。&#10;&#10;&gt; 一般在INSERT、UPDATE、DELETE语句执行后开始检查，也可以在事务提交时检查。&#10;&#10;数据库管理系统若发现用户的操作**违背了完整性约束条件**，就采取一定的动作&#10;&#10;&gt; 拒绝（NO ACTION）执行该操作&#10;&gt;&#10;&gt; 级连（CASCADE）执行其他操作">
  </outline>
  <outline text="二、实体完整性">
    <outline text="定义" _note="关系模型的实体完整性：CREATE TABLE中用**PRIMARY KEY**定义&#10;&#10;**单属性**构成的码有两种说明方法&#10;&#10;&gt; 定义为列级约束条件&#10;&gt;&#10;&gt; 定义为表级约束条件&#10;&#10;**多个属性**构成的码只有一种说明方法&#10;&#10;&gt; 定义为表级约束条件&#10;&#10;**示例：将Student表中的Sno属性定义为码**&#10;&#10;1️⃣ 在列级定义主码&#10;&#10;    CREATE TABLE Student&#10;    ( Sno CHAR(9) PRIMARY KEY,&#10;      Sname CHAR(20) NOT NULL,   &#10;      Ssex CHAR(2),&#10;      Sage SMALLINT,&#10;      Sdept CHAR(20)&#10;     ); &#10;&#10;2️⃣ 在表级定义主码&#10;&#10;    CREATE TABLE Student&#10;    ( Sno CHAR(9), &#10;      Sname CHAR(20) NOT NULL,&#10;      Ssex CHAR(2),&#10;      Sage SMALLINT,&#10;      Sdept CHAR(20),&#10;      PRIMARY KEY (Sno)&#10;    );&#10;&#10;**示例：将SC表中的Sno，Cno属性组定义为码**&#10;&#10;    CREATE TABLE SC&#10;    ( Sno  CHAR(9) NOT NULL, &#10;      Cno CHAR(4) NOT NULL, &#10;      Grade  SMALLINT,&#10;      PRIMARY KEY (Sno,Cno)   /*多属性码只能在表级定义主码*/&#10;    );">
    </outline>
    <outline text="实体完整性检查和违约处理" _note="插入或对主码列进行更新操作时，关系数据库管理系统按照实体完整性规则自动进行检查。&#10;&#10;包括：&#10;&#10;1️⃣ 检查**主码值是否唯一**，如果不唯一则拒绝插入或修改。&#10;&#10;&gt; 唯一的一种方法是进行**全表扫描**&#10;&gt;&#10;&gt; **为避免对基本表进行全表扫描，RDBMS核心一般都在主码上自动建立一个索引**&#10;&gt;&#10;&gt; ![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220208171939630.png)&#10;&#10;2️⃣ 检查**主码的各个属性是否为空**，只要有一个为空就拒绝插入或修改。">
    </outline>
  </outline>
  <outline text="三、参照完整性">
    <outline text="定义" _note="关系模型的参照完整性定义&#10;&#10;&gt; 在CREATE TABLE中用**FOREIGN KEY**短语定义哪些列为外码&#10;&gt;&#10;&gt; 用**REFERENCES短语指明这些外码参照哪些表的主码**&#10;&#10;外键不能为空&#10;&#10;关系SC中（Sno，Cno）是主码。Sno，Cno分别参照Student表的主码和Course表的主码&#10;&#10;**举例：定义SC中的参照完整性**&#10;&#10;    CREATE TABLE SC&#10;    (  Sno      CHAR(9)  NOT NULL,&#10;       Cno      CHAR(4)  NOT NULL,&#10;       Grade    SMALLINT,&#10;       PRIMARYKEY (Sno, Cno),   /*在表级定义实体完整性*/                                                             &#10;       FOREIGN KEY (Sno) REFERENCES Student(Sno),  /*在表级定义参照完整性*/                                     &#10;       FOREIGN KEY (Cno) REFERENCES Course(Cno)   /*在表级定义参照完整性*/&#10;    );">
    </outline>
    <outline text="参照完整性检查和违约处理" _note="一个参照完整性将两个表中的相应元组联系起来&#10;&#10;对被参照表和参照表进行增删改操作时有可能破坏参照完整性，必须进行检查&#10;&#10;**参照完整性违约处理**&#10;&#10;&gt; 1️⃣ **拒绝（NO ACTION）执行**&#10;&gt;&#10;&gt; 不允许该操作执行。该策略一般设置为默认策略&#10;&gt;&#10;&gt; 2️⃣ **级联（CASCADE）操作**&#10;&gt;&#10;&gt; 当删除或修改被参照表（Student）的一个元组造成了与参照表（SC）的不一致，则删除或修改参照表中的所有造成不一致的元组&#10;&gt;&#10;&gt; 3️⃣ **设置为空值（SET-NULL）**&#10;&gt;&#10;&gt; 当删除或修改被参照表的一个元组时造成了不一致，则将**参照表中的所有造成不一致的元组的对应属性设置为空值。**&#10;&#10;🎨 示例：有下面2个关系&#10;&#10;&gt; 学生（学号，姓名，性别，专业号，年龄）&#10;&gt;&#10;&gt; 专业（专业号，专业名）&#10;&#10;假设专业表中某个元组被删除，专业号为12&#10;&#10;按照设置为空值的策略，就要把学生表中专业号=12的所有元组的专业号设置为空值&#10;&#10;对应语义：某个专业删除了，该专业的所有学生专业未定，等待重新分配专业">
    </outline>
  </outline>
  <outline text="四、用户定义的完整性" _note="用户定义的完整性是：针对某一具体应用的数据必须满足的语义要求&#10;&#10;关系数据库管理系统提供了定义和检验用户定义完整性的机制，不必由应用程序承担">
    <outline text="属性上约束条件的定义" _note="**CREATE TABLE时定义属性上的约束条件**">
      <outline text="列值非空（NOT NULL）" _note="示例：在定义SC表时，说明Sno、Cno、Grade属性不允许取空值。&#10;&#10;    CREATE TABLE SC&#10;    ( Sno CHAR(9) NOT NULL,   &#10;      Cno CHAR(4) NOT NULL,  &#10;      Grade SMALLINT NOT NULL,   &#10;      PRIMARY KEY (Sno, Cno), &#10;       … &#10;      /* 如果在表级定义实体完整性，隐含了Sno，Cno不允许取空值，则在列级不允许取空值的定义 可以不写 * /&#10;    );">
      </outline>
      <outline text="列值唯一（UNIQUE）" _note="示例：建立部门表DEPT，要求部门名称Dname列取值唯一，部门编号Deptno列为主码&#10;&#10;    CREATE TABLE DEPT&#10;    (  Deptno NUMERIC(2),&#10;       Dname CHAR(9) UNIQUE NOT NULL，  /*要求Dname列值唯一, 并且不能取空值*/&#10;       Location CHAR(10),&#10;       PRIMARY KEY (Deptno)&#10;     );">
      </outline>
      <outline text="检查列值是否满足一个条件表达式（CHECK）" _note="示例：Student表的Ssex只允许取“男”或“女”。&#10;&#10;    CREATE TABLE Student&#10;    ( Sno CHAR(9) PRIMARY KEY,&#10;      Sname CHAR(8) NOT NULL,           &#10;      Ssex CHAR(2) CHECK （Ssex IN （‘男’,’女’）），   /*性别属性Ssex只允许取'男'或'女' */&#10;      Sage SMALLINT,&#10;      Sdept CHAR(20)&#10;    );">
      </outline>
      <outline text="属性上的约束条件检查和违约处理" _note="插入元组或修改属性的值时，关系数据库管理系统检查属性上的约束条件是否被满足&#10;&#10;如果不满足则操作被**拒绝执行**">
      </outline>
    </outline>
    <outline text="元组上约束条件的定义" _note="在CREATE TABLE时可以用**CHECK短语定义元组上的约束条件**，即元组级的限制&#10;&#10;同属性值限制相比，元组级的限制可以设置不同属性之间的取值的相互约束条件&#10;&#10;示例：当学生的性别是男时，其名字不能以Ms.打头。&#10;&#10;    CREATE TABLE Student&#10;    ( Sno  CHAR(9), &#10;      Sname CHAR(8) NOT NULL，&#10;      Ssex  CHAR(2),&#10;      Sage  SMALLINT,&#10;      Sdept CHAR(20),&#10;      PRIMARY KEY (Sno),&#10;      CHECK (Ssex=‘女’ OR Sname NOT LIKE ‘Ms.%’) &#10;      /*定义了元组中Sname和 Ssex两个属性值之间的约束条件*/&#10;    );&#10;&#10;性别是女性的元组都能通过该项检查，因为Ssex=‘女’成立;当性别是男性时，要通过检查则名字一定不能以Ms.打头">
      <outline text="元组上的约束条件检查和违约处理" _note="插入元组或修改属性的值时，关系数据库管理系统检查元组上的约束条件是否被满足&#10;&#10;如果不满足则操作被**拒绝执行**">
      </outline>
    </outline>
  </outline>
  <outline text="五、完整性约束命名子句">
    <outline text="完整性约束命名子句CONSTRAINT" _note="优点：**CONSTRAINT用来完整性约束条件命名，从而灵活地增加、删除一个完整性约束条件。**&#10;&#10;    CONSTRAINT &lt;完整性约束条件名&gt;&lt;完整性约束条件&gt;&#10;    &lt;完整性约束条件&gt;包括NOT NULL、UNIQUE、PRIMARY KEY短语、FOREIGN KEY短语、CHECK短语等&#10;&#10;示例：建立学生登记表Student，要求学号在90000~99999之间，姓名不能取空值，年龄小于30，性别只能是“男”或“女”。&#10;&#10;    CREATE TABLE Student&#10;    (  Sno NUMERIC(6)&#10;       CONSTRAINT C1 CHECK (Sno BETWEEN 90000 AND 99999),&#10;       Sname CHAR(20) &#10;       CONSTRAINT C2 NOT NULL,&#10;       Sage NUMERIC(3)&#10;       CONSTRAINT C3 CHECK (Sage &lt; 30),&#10;       Ssex CHAR(2)&#10;       CONSTRAINT C4 CHECK (Ssex IN ( ‘男’,'女')),&#10;       CONSTRAINT StudentKey PRIMARY KEY(Sno)&#10;    );&#10;    在Student表上建立了5个约束条件，包括主码约束（命名为StudentKey）以及C1、C2、C3、C4四个列级约束">
    </outline>
    <outline text="修改表中的完整性限制" _note="**使用ALTER TABLE语句修改表中的完整性限制**&#10;&#10;1️⃣ 示例：去掉Student表中对性别的限制。&#10;&#10;    ALTER TABLE Student &#10;    DROP CONSTRAINT C4;&#10;&#10;2️⃣&#10;示例：修改表Student中的约束条件，要求学号改为在900000~999999之间，年龄由小于30改为小于40&#10;&#10;    可以先删除原来的约束条件，再增加新的约束条件&#10;    ALTER TABLE Student&#10;    DROP CONSTRAINT C1;&#10;    ALTER TABLE Student&#10;    ADD CONSTRAINT C1 CHECK (Sno BETWEEN 900000 AND 999999；&#10;    ALTER TABLE Student&#10;    DROP CONSTRAINT C3;&#10;    ALTER TABLE Student&#10;    ADD CONSTRAINT C3 CHECK(Sage &lt; 40);">
    </outline>
  </outline>
  <outline text="六、域中的完整性限制" _note="域是一组具有相同数据类型的值的集合&#10;&#10;SQL中可用**CREATE DOMAIN**建立一个域，以及该域应该满足的完&#10;整性约束条件，然后用域来定义属性。&#10;&#10;优点：数据库中不同的属性可来自同一个域，当域上的完整性约&#10;束条件改变时只要修改域的定义即可，而不必一一修改域上的各个属性。&#10;&#10;🎨 例子：建立一个性别域，并声明性别域的取值范围。&#10;&#10;    CREATE DOMAIN GenderDomain CHAR(2)&#10;    CHECK（VALUE IN(‘男’， ‘女’)）">
  </outline>
  <outline text="七、断言" _note="SQL中，可以使用 CREATE&#10;ASSERTION语句，通过声明性**断言来指定更具一般性的约束**。&#10;&#10;优点：可以定义涉及多个表的或聚集操作的比较复杂的完整性约束。&#10;&#10;断言创建以后，任何对断言中所涉及的关系的操作都会触发关系数据库管理系统对断言的检查，任何使断言不为真值的操作都会被拒绝执行">
    <outline text="创建断言的语句格式" _note="    CREATE ASSERTION&lt;断言名&gt;&lt;CHECK 子句&gt;&#10;&#10;每个断言都被赋予一个名字，&amp;lt;CHECK&#10;子句&amp;gt;中的约束条件与WHERE子句的条件表达式类似。&#10;&#10;🎨 举例：**限制数据库课程最多60名学生选修**&#10;&#10;    CREATE ASSERTION ASSE_SC_DB_NUM&#10;    CHECK (60 &gt;= (select count(*) /*此断言的谓词涉及聚集操作count的SQL语句*/&#10;        		  From Course,SC&#10;        		  Where SC.Cno=Course.Cno and Course.Cname ='数据库')&#10;    );&#10;&#10;🎨 举例：**限制每一门课程最多60名学生选修**&#10;&#10;    CREATE ASSERTION ASSE_SC_CNUM1&#10;    CHECK(60 &gt;= ALL (SELECT count(*) /*此断言的谓词，涉及聚集count */ 		      &#10;                     FROM  SC        /*和分组函数group by的SQL语句*/&#10;    		         GROUP by cno)&#10;    );&#10;&#10;🎨 举例：**限制每个学期每一门课程最多60名学生选修**&#10;&#10;    首先需要修改SC表的模式，增加一个“学期（TERM）”属性&#10;    ALTER TABLE SC ADD TERM DATE;&#10;    然后，定义断言：&#10;    CREATE ASSERTION ASSE_SC_CNUM2&#10;    CHECK(60 &gt;= ALL (SELECT count(*)&#10;                     FROM SC&#10;    			     GROUP by cno,TERM)&#10;    );">
    </outline>
    <outline text="删除断言的语句格式为" _note="    DROP ASSERTION &lt;断言名&gt;;">
    </outline>
  </outline>
  <outline text="八、触发器" _note="触发器（Trigger）是用户定义在关系表上的一类由事件驱动的特殊过程&#10;&#10;&gt; 触发器保存在数据库服务器中。&#10;&gt;&#10;&gt; 任何用户对表的增、删、改操作均由服务器自动激活相应的触发器。&#10;&gt;&#10;&gt; 优点：触发器类似约束，但比约束更加灵活，可以实施更为复杂的检查和操作，具有更精细和更强大的数据控制能力。&#10;&#10;CREATE TRIGGER**语法格式**&#10;&#10;    CREATE TRIGGER &lt;触发器名&gt; /*每当触发事件发生时，该触发器被激活 */ &#10;    {BEFORE | AFTER} &lt;触发事件&gt; ON &lt;表名&gt; /*指明触发器激活的时间是执行触发事件前或后 */ &#10;    REFERENCING NEW|OLD ROW AS&lt;变量&gt; /*Referencing指出应用的变量*/ &#10;    FOR EACH {ROW | STATEMENT} /*定义触发器的类型，指明动作体执行的频率 */ &#10;    [WHEN &lt;触发条件&gt;]&lt;触发动作体&gt;  /*仅当触发条件为真时才执行触发动作体*/&#10;&#10;触发器又叫做事件-条件-动作（event-condition-action）规则。当特定的系统事件发生时，对规则的条件进行检查，如果条件成立则执行规则中的动作，否则不执行该动作。规则中的动作体可以很复杂，通常是一段SQL存储过程&#10;&#10;**语法说明**&#10;&#10;1️⃣ 表的拥有者才可以在表上创建触发器&#10;&#10;2️⃣ 触发器名&#10;&#10;&gt; 触发器名可以包含模式名，也可以不包含模式名&#10;&gt;&#10;&gt; 同一模式下，触发器名必须是唯一的&#10;&gt;&#10;&gt; 触发器名和表名必须在同一模式下&#10;&#10;3️⃣ 表名&#10;&#10;&gt; 触发器只能定义在基本表上，不能定义在视图上&#10;&gt;&#10;&gt; 当基本表的数据发生变化时，将激活定义在该表上相应触发事件的触发器&#10;&#10;4️⃣ 触发事件&#10;&#10;&gt; 触发事件可以是INSERT、DELETE或UPDATE 也可以是这几个事件的组合&#10;&gt;&#10;&gt; 还可以UPDATE OF&amp;lt;触发列，...&amp;gt;，即进一步指明修改哪些列时激活触发器&#10;&gt;&#10;&gt; AFTER/BEFORE是触发的时机&#10;&gt;&#10;&gt; &gt; AFTER表示在触发事件的操作执行之后激活触发器&#10;&gt; &gt;&#10;&gt; &gt; BEFORE表示在触发事件的操作执行之前激活触发器&#10;&#10;5️⃣ 触发器类型&#10;&#10;&gt; **行级触发器（FOR EACH ROW）**&#10;&gt;&#10;&gt; **语句级触发器（FOR EACH STATEMENT）**&#10;&#10;例如: 在TEACHER表上创建一个AFTER UPDATE触发器，触发事件是UPDAT语句：&#10;&#10;     UPDATE TEACHER SET Deptno=5;&#10;&#10;假设表TEACHER有1000行&#10;&#10;&gt; 如果是行级触发器，触发动作将执行1000次&#10;&gt;&#10;&gt; 如果是语句级触发器，那么执行完该语句后，触发动作只发生一次&#10;&#10;6️⃣ 触发条件&#10;&#10;&gt; 触发器被激活时，只有当触发条件为真时触发动作体才执行;&#10;&gt;&#10;&gt; 否则触发动作体不执行。&#10;&gt;&#10;&gt; 如果省略WHEN触发条件，则触发动作体在触发器激活后立即执行&#10;&#10;7️⃣ 触发动作体&#10;&#10;&gt; 触发动作体可以是一个匿名SQL过程块&#10;&gt;&#10;&gt; 也可以是对已创建存储过程的调用&#10;&gt;&#10;&gt; 如果是行级触发器，用户都可以在过程体中使用NEW和OLD引用事件之后的新值和事件之前的旧值&#10;&gt;&#10;&gt; 如果是语句级触发器，则不能在触发动作体中使用NEW或OLD进行引用&#10;&gt;&#10;&gt; 如果触发动作体执行失败，激活触发器的事件就会终止执行，触发器的目标表或触发器可能影响的其他对象不发生任何变化&#10;&#10;注意：不同的RDBMS产品触发器语法各部相同&#10;&#10;🎨&#10;举例：**将每次对表Student的插入操作所增加的学生个数记录到表StudentInsertLog中**。&#10;&#10;    CREATE TRIGGER Student_Count&#10;    AFTER INSERT ON Student        /*指明触发器激活的时间是在执行INSERT后*/  &#10;    REFERENCING&#10;    NEW TABLE AS DELTA&#10;    FOR EACH STATEMENT /*语句级触发器, 即执行完INSERT语句后下面的触发动作体才执行一次*/&#10;    INSERT INTO StudentInsertLog (Numbers)&#10;    SELECT COUNT(*) FROM DELTA&#10;&#10;**活触发器**&#10;&#10;触发器的执行，是由触发事件激活的，并由数据库服务器自动执行。&#10;&#10;一个数据表上可能定义了多个触发器，遵循如下的执行顺序:&#10;&#10;&gt; 1️⃣ 执行该表上的BEFORE触发器;&#10;&gt;&#10;&gt; 2️⃣ 激活触发器的SQL语句;&#10;&gt;&#10;&gt; 3️⃣ 执行该表上的AFTER触发器&#10;&#10;**删除触发器的SQL语法：**&#10;&#10;    DROP TRIGGER &lt;触发器名&gt; ON &lt;表名&gt;;&#10;&#10;触发器必须是一个已经创建的触发器，并且只能由具有相应权限的用户删除。">
  </outline>
  <outline text="九、习题" _note="![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220208174908402.png)&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220208174918131.png)">
  </outline>
</outline>
  </body>
</opml>
