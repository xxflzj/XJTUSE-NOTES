<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <dateModified></dateModified>
    <ownerName></ownerName>
  </head>
  <body>
<outline text="[XJTUSE DATABASE]——第三章 关系数据库标准语言SQL">
  <outline text="一、SQL概述" _note="1️⃣ SQL(Structured Query Language)&#10;&#10;&gt; 结构化查询语言，是关系数据库的标准语言&#10;&gt;&#10;&gt; SQL是一个通用的、功能极强的关系数据库语言&#10;&#10;2️⃣ SQL的产生与发展&#10;&#10;&gt; 1972：IBM开始研究System R系统，配置了数据库语言SQUARE&#10;&gt;&#10;&gt; 1974：Boyce和Chamberlin将SQUARE修改为SEQUEL，后简称为SQL (Structured&#10;&gt; Query Language)&#10;&gt;&#10;&gt; 1970s末起：主流数据库厂商纷纷支持SQL&#10;&gt;&#10;&gt; Oracle、DB2、Sybase&#10;&#10;3️⃣ SQL的特点&#10;&#10;&gt; 综合统一&#10;&gt;&#10;&gt; 高度非过程化&#10;&gt;&#10;&gt; 面向集合的操作方式&#10;&gt;&#10;&gt; 一种语法结构多种使用方式&#10;&gt;&#10;&gt; &gt; 既是独立的语言，又是**嵌入式语言**&#10;&gt;&#10;&gt; 语言简洁易学&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220128105205441.png)&#10;&#10;4️⃣ 基本表&#10;&#10;&gt; SQL中一个关系就对应一个基本表&#10;&gt;&#10;&gt; 本身独立存在的表&#10;&gt;&#10;&gt; 一个(或多个)基本表对应一个存储文件&#10;&gt;&#10;&gt; 一个表可以带若干索引&#10;&#10;5️⃣ 存储文件&#10;&#10;&gt; 逻辑结构组成了关系数据库的内模式&#10;&gt;&#10;&gt; 物理结构对用户是隐蔽的">
  </outline>
  <outline text="二、数据定义" _note="![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220128105506212.png)">
    <outline text="模式的定义与删除">
      <outline text="定义模式" _note="定义模式实际上**定义了一个命名空间。**&#10;&#10;在这个空间中可以定义该模式包含的数据库对象例如基本表、视图、索引等。&#10;&#10;在CREATE SCHEMA中可以接受CREATE TABLE，CREATE VIEW和GRANT子句。&#10;&#10;CREATE SCHEMA &amp;lt;模式名&amp;gt; AUTHORIZATION&#10;&amp;lt;用户名&amp;gt;\[&amp;lt;表定义子句&amp;gt;|&amp;lt;视图定义子句&amp;gt;|&amp;lt;授权定义子句&amp;gt;\]&#10;&#10;示例：为用户ZHANG创建了一个模式TEST，并且在其中定义一个表TAB1&#10;&#10;    CREATE SCHEMA TEST AUTHORIZATION ZHANG&#10;    CREATE TABLE TAB1 ( COL1 SMALLINT,&#10;    					COL2 INT,&#10;                      	COL3 CHAR(20),&#10;                       	COL4 NUMERIC(10,3),&#10;                       	COL5 DECIMAL(5,2)  );">
      </outline>
      <outline text="删除模式" _note="DROP SCHEMA &amp;lt;模式名&amp;gt; &amp;lt;CASCADE|RESTRICT&amp;gt;&#10;&#10;CASCADE(级联)&#10;&#10;&gt; 删除模式的同时把该模式中所有的数据库对象全部删除&#10;&#10;RESTRICT(限制)&#10;&#10;&gt; 如果该模式中定义了下属的数据库对象(如表、视图等)，则拒绝该删除语句的执行。&#10;&gt;&#10;&gt; 仅当该模式中没有任何下属的对象时才能执行。&#10;&#10;    示例：&#10;    DROP SCHEMA ZHANG CASCADE&#10;    删除模式ZHANG 同时该模式中定义的表TAB1也被删除">
      </outline>
    </outline>
    <outline text="基本表的定义、删除与修改" _note="定义基本表&#10;&#10;    CREATE TABLE &lt;表名&gt;&#10;    (&lt;列名&gt; &lt;数据类型&gt;[ &lt;列级完整性约束条件&gt; ]&#10;    ,&lt;列名&gt; &lt;数据类型&gt;[ &lt;列级完整性约束条件&gt;] &#10;    …&#10;    [,&lt;表级完整性约束条件&gt; ] );&#10;&#10;&gt; &amp;lt;表名&amp;gt;：所要定义的基本表的名字&#10;&gt;&#10;&gt; &amp;lt;列名&amp;gt;：组成该表的各个属性(列)&#10;&gt;&#10;&gt; &amp;lt;列级完整性约束条件&amp;gt;：涉及相应属性列的完整性约束条件&#10;&gt;&#10;&gt; &amp;lt;表级完整性约束条件&amp;gt;：涉及一个或多个属性列的完整性约束条件&#10;&gt;&#10;&gt; 如果完整性约束条件**涉及到该表的多个属性列，则必须定义在表级**上，否则既可以定义在列级也可以定义在表级。&#10;&#10;示例：学生—课程数据库&#10;&#10;&gt; 学生-课程模式 S-T&#10;&gt;&#10;&gt; 学生表：Student(Sno,Sname,Ssex,Sage,Sdept)&#10;&gt;&#10;&gt; 课程表：Course(Cno,Cname,Cpno,Ccredit)&#10;&gt;&#10;&gt; 学生选课表：SC(Sno,Cno,Grade)&#10;&#10;1️⃣ **建立“学生”表Student。学号是主码，姓名取值唯一**&#10;&#10;    CREATE TABLE Student(Sno CHAR(9) PRIMARY KEY,  /* 列级完整性约束条件,Sno是主码*/&#10;    					 Sname CHAR(20) UNIQUE, /* Sname取唯一值约束 */&#10;    					 Ssex CHAR(2),&#10;    					 Sage SMALLINT,&#10;    					 Sdept CHAR(20)&#10;    					 );&#10;&#10;2️⃣ **建立课程表Course**&#10;&#10;    CREATE TABLE Course(Cno CHAR(4) PRIMARY KEY,&#10;                        Cname CHAR(40) NOT NULL, /*列级完整性约束，Cname不能取空值*/&#10;                        Cpno CHAR(4),/*表示先修课*/&#10;                        Ccredit SMALLINT&#10;                        FOREIGN KEY (Cpno) REFERENCES Course(Cno) &#10;    					/*表级完整性约束，Cpno是外码，被参照表是Course, 被参照列是Cno*/&#10;                       );&#10;&#10;3️⃣ **建立选课表SC**&#10;&#10;    CREATE TABLE SC(Sno CHAR(9),&#10;                    Cno CHAR(4),&#10;                    Grade SMALLINT，&#10;                    PRIMARY KEY (Sno,Cno),/* 主码由两个属性构成，必须作为表级完整性进行定义*/&#10;                    FOREIGN KEY (Sno) REFERENCES Student(Sno),&#10;                    /* 表级完整性约束条件，Sno是外码，被参照表是Student */&#10;                    FOREIGN KEY (Cno)REFERENCES Course(Cno)&#10;                    /* 表级完整性约束条件， Cno是外码，被参照表是Course*/&#10;                   );">
      <outline text="数据类型" _note="SQL中域的概念用数据类型来实现&#10;&#10;定义表的属性时需要指明其数据类型及长度&#10;&#10;选用哪种数据类型&#10;&#10;&gt; 取值范围&#10;&gt;&#10;&gt; 要做哪些运算&#10;&#10;[TABLE]">
      </outline>
      <outline text="模式与表" _note="每一个基本表都属于某一个模式&#10;&#10;一个模式包含多个基本表&#10;&#10;定义基本表所属模式&#10;&#10;&gt; 1️⃣ 方法一：在表名中明显地给出模式名&#10;&gt;&#10;&gt;     Create table&quot;S-T&quot;.Student(......); /*模式名为 S-T*/&#10;&gt;     Create table &quot;S-T&quot;.Cource(......);&#10;&gt;     Create table &quot;S-T&quot;.SC(......);&#10;&gt;&#10;&gt; 2️⃣ 方法二：在创建模式语句中同时创建表&#10;&gt;&#10;&gt; 3️⃣ 方法三：设置所属的模式&#10;&#10;创建基本表(其他数据库对象也一样)时，若没有指定模式，系统根据搜索路径来确定该对象所属的模式&#10;&#10;关系数据库管理系统会使用模式列表中第一个存在的模式作为数据库对象的模式名&#10;&#10;若搜索路径中的模式名都不存在，系统将给出错误&#10;&#10;显示当前的搜索路径： `SHOW search_path;`&#10;&#10;搜索路径的当前默认值是：`$user， PUBLIC`&#10;&#10;数据库管理员用户可以设置搜索路径，然后定义基本表&#10;&#10;    SET search_path TO &quot;S-T&quot;,PUBLIC;&#10;    Create table Student(......);&#10;&#10;结果建立了S-T.Student基本表。关系数据库管理系统发现搜索路径中第一个模式名S-T，就把该模式作为基本表Student所属的模式。">
      </outline>
      <outline text="修改基本表" _note="    ALTER TABLE &lt;表名&gt;&#10;    [ ADD[COLUMN] &lt;新列名&gt; &lt;数据类型&gt; [ 完整性约束 ] ]&#10;    [ ADD &lt;表级完整性约束&gt;]&#10;    [ DROP [ COLUMN ] &lt;列名&gt; [CASCADE| RESTRICT] ]&#10;    [ DROP CONSTRAINT&lt;完整性约束名&gt;[ RESTRICT | CASCADE ] ]&#10;    ALTER COLUMN &lt;列名&gt;&lt;数据类型&gt; ] ; &#10;&#10;&amp;lt;表名&amp;gt;是要修改的基本表&#10;&#10;🏷&#10;**ADD**子句用于增加新列、新的列级完整性约束条件和新的表级完整性约束条件&#10;&#10;🏷 **DROP COLUMN**子句用于删除表中的列&#10;&#10;&gt; 如果指定了CASCADE短语，则自动删除引用了该列的其他对象&#10;&gt;&#10;&gt; 如果指定了RESTRICT短语，则如果该列被其他对象引用，数据库管理系统将拒绝删除该列&#10;&#10;🏷 **DROP CONSTRAINT**子句用于删除指定的完整性约束条件&#10;&#10;🏷 **ALTER COLUMN**子句用于修改原有的列定义，包括修改列名和数据类型&#10;&#10;🔑 示例：向Student表增加“入学时间”列，其数据类型为日期型&#10;&#10;    ALTER TABLE Student ADD S_entrance DATE;&#10;&#10;不管基本表中原来是否已有数据，新增加的列一律为空值&#10;&#10;🔑 示例：将年龄的数据类型由字符型(假设原来的数据类型是字符型)改为整数&#10;&#10;    ALTER TABLE Student ALTER COLUMN Sage INT;">
      </outline>
      <outline text="删除基本表" _note="    DROP TABLE &lt;表名&gt;［RESTRICT| CASCADE］;&#10;&#10;&gt; RESTRICT：删除表是有限制的。&#10;&gt;&#10;&gt; &gt; 欲删除的基本表不能被其他表的约束所引用&#10;&gt; &gt;&#10;&gt; &gt; 如果存在依赖该表的对象，则此表不能被删除&#10;&gt;&#10;&gt; CASCADE：删除该表没有限制。级联删除&#10;&gt;&#10;&gt; &gt; 在删除基本表的同时，相关的依赖对象一起删除&#10;&#10;示例：删除Student表&#10;&#10;    DROP TABLE Student CASCADE;&#10;&#10;基本表定义被删除，数据被删除,表上建立的索引、视图、触发器等一般也将被删除">
      </outline>
    </outline>
    <outline text="索引的建立与删除" _note="建立索引的目的：**加快查询速度**&#10;&#10;关系数据库管理系统中常见索引：&#10;&#10;&gt; 顺序文件上的索引&#10;&gt;&#10;&gt; B+树索引&#10;&gt;&#10;&gt; 散列(hash)索引&#10;&gt;&#10;&gt; 位图索引&#10;&#10;特点：&#10;&#10;&gt; B+树索引具有动态平衡的优点&#10;&gt;&#10;&gt; HASH索引具有查找速度快的特点&#10;&#10;    CREATE [UNIQUE] [CLUSTER] INDEX &lt;索引名&gt; ON &lt;表名&gt;(&lt;列名&gt;[&lt;次序&gt;][,&lt;列名&gt;[&lt;次序&gt;] ]…);&#10;    &lt;表名&gt;：要建索引的基本表的名字&#10;    索引：可以建立在该表的一列或多列上，各列名之间用逗号分隔&#10;    &lt;次序&gt;：指定索引值的排列次序，升序：ASC，降序：DESC。缺省值：ASC&#10;    UNIQUE：此索引的每一个索引值只对应唯一的数据记录&#10;    CLUSTER：表示要建立的索引是聚簇索引">
      <outline text="建立索引" _note="为学生-课程数据库中的Student，Course，SC三个表建立索引。Student表按学号升序建唯一索引，Course表按课程号升序建唯一索引，SC表按学号升序和课程号降序建唯一索引&#10;&#10;    CREATE UNIQUE INDEX Stusno ON Student(Sno);&#10;    CREATE UNIQUE INDEX Coucno ON Course(Cno);&#10;    CREATE UNIQUE INDEX SCno ON SC(Sno ASC,Cno DESC);">
      </outline>
      <outline text="修改索引" _note="    ALTER INDEX &lt;旧索引名&gt; RENAME TO &lt;新索引名&gt;；&#10;    将SC表的SCno索引名改为SCSno&#10;    ALTER INDEX SCno RENAME TO SCSno;">
      </outline>
      <outline text="删除索引" _note="    DROP INDEX &lt;索引名&gt;;">
      </outline>
    </outline>
    <outline text="数据字典" _note="数据字典是关系数据库管理系统内部的一组系统表，它记录了数据库中所有定义信息：关系模式定义、视图定义、索引定义、完整性约束定义、各类用户对数据库的操作权限、统计信息等">
    </outline>
  </outline>
  <outline text="三、数据查询【重点】" _note="    SELECT [ALL|DISTINCT] &lt;目标列表达式&gt;[,&lt;目标列表达式&gt;] …&#10;    FROM &lt;表名或视图名&gt;[,&lt;表名或视图名&gt; ]…|(SELECT 语句)[AS]&lt;别名&gt;&#10;    [ WHERE &lt;条件表达式&gt; &#10;    [ GROUP BY &lt;列名1&gt; [ HAVING &lt;条件表达式&gt; ] ]&#10;    [ ORDER BY &lt;列名2&gt; [ ASC|DESC ] ];&#10;&#10;🏷 **SELECT子句**：指定要显示的属性列&#10;&#10;🏷 **FROM子句**：指定查询对象(基本表或视图)&#10;&#10;🏷 **WHERE子句**：指定查询条件&#10;&#10;🏷 **GROUP&#10;BY子句**：对查询结果按指定列的值分组，该属性列值相等的元组为一个组。通常会在每组中作用聚集函数。&#10;&#10;🏷 **HAVING短语**：只有满足指定条件的组才予以输出&#10;&#10;🏷 **ORDER BY子句**：对查询结果表按指定列值的升序或降序排序">
    <outline text="单表查询" _note="&gt; 学生表：Student(Sno,Sname,Ssex,Sage,Sdept)&#10;&gt;&#10;&gt; 课程表：Course(Cno,Cname,Cpno,Ccredit)&#10;&gt;&#10;&gt; 学生选课表：SC(Sno,Cno,Grade)">
      <outline text="1、查询指定列" _note="**查询全体学生的学号与姓名。**&#10;&#10;    SELECT Sno,Sname&#10;    FROM Student;&#10;&#10;**查询全体学生的姓名、学号、所在系。**&#10;&#10;    SELECT Sname,Sno,Sdept&#10;    FROM Student;">
      </outline>
      <outline text="2、查询全部列" _note="&gt; 在SELECT关键字后面列出所有列名&#10;&gt;&#10;&gt; 将&amp;lt;目标列表达式&amp;gt;指定为 \*&#10;&#10;**查询全体学生的详细记录**&#10;&#10;    SELECT Sno,Sname,Ssex,Sage,Sdept&#10;    FROM Student;&#10;    或&#10;    SELECT *&#10;    FROM Student;">
      </outline>
      <outline text="3、查询经过计算的值" _note="SELECT子句的&amp;lt;目标列表达式&amp;gt;不仅可以为表中的属性列，也可以是表达式&#10;&#10;**查全体学生的姓名及其出生年份。**&#10;&#10;    SELECT Sname,2014-Sage/*假设当时为2014年*/&#10;    FROM Student;&#10;&#10;**查询全体学生的姓名、出生年份和所在的院系，要求用小写字母表示系名**。&#10;&#10;    SELECT Sname,'Year of Birth: ',2014-Sage,LOWER(Sdept)&#10;    FROM Student;">
      </outline>
      <outline text="4、消除取值重复的行" _note="指定**DISTINCT**关键词，去掉表中重复的行&#10;&#10;    SELECT DISTINCT Sno&#10;    FROM SC;">
      </outline>
      <outline text="5、查询满足条件的元组" _note="">
        <outline text="1) 确定大小" _note="1️⃣ 查询软件学院全体学生的名单。&#10;&#10;    SELECT Sname&#10;    FROM Student&#10;    WHERE Sdept=‘SE’;&#10;&#10;2️⃣ 查询所有年龄在20岁以下的学生姓名及其年龄。&#10;&#10;    SELECT Sname,Sage&#10;    FROM Student&#10;    WHERE Sage &lt; 20;&#10;&#10;3️⃣ 查询考试成绩有不及格的学生的学号。&#10;&#10;    SELECT DISTINCT Sn&#10;    FROM SC&#10;    WHERE Grade&lt;60;">
        </outline>
        <outline text="2) 确定范围" _note="1️⃣ 查询年龄在20~23岁(包括20岁和23岁)之间的学生的姓名、系别和年龄&#10;&#10;    SELECT Sname, Sdept, Sage&#10;    FROM Student&#10;    WHERE Sage BETWEEN 20 AND 23;&#10;&#10;2️⃣ 查询年龄不在20~23岁之间的学生姓名、系别和年龄&#10;&#10;    SELECT Sname, Sdept, Sage&#10;    FROM Student&#10;    WHERE Sage NOT BETWEEN 20 AND 23;">
        </outline>
        <outline text="3) 确定集合" _note="1️⃣ 查询软件学院(SE)、数学系(MA)和信息系(IS)学生的姓名和性别。&#10;&#10;    SELECT Sname, Ssex&#10;    FROM Student&#10;    WHERE Sdept IN ('SE','MA’,'IS' );&#10;&#10;2️⃣ 查询既不是软件学院、数学系，也不是信息系的学生的姓名和性别。&#10;&#10;    SELECT Sname, Ssex&#10;    FROM Student&#10;    WHERE Sdept NOT IN ('IS','MA’,'SE' );">
        </outline>
        <outline text="4) 字符匹配" _note="谓词： \[NOT\] LIKE ‘&amp;lt;匹配串&amp;gt;’ \[ESCAPE ‘ &amp;lt;换码字符&amp;gt;’\]&#10;&#10;&amp;lt;匹配串&amp;gt;可以是一个完整的字符串，也可以含有通配符%和 \_&#10;&#10;% (百分号) 代表任意长度(长度可以为0)的字符串&#10;&#10;&gt; 例如a%b表示以a开头，以b结尾的任意长度的字符串&#10;&#10;\_(下横线) 代表任意单个字符。&#10;&#10;&gt; 例如a\_b表示以a开头，以b结尾的长度为3的任意字符串&#10;&#10;1️⃣ 查询学号为201215121的学生的详细情况。&#10;&#10;    SELECT *           等价于         SELECT *&#10;    FROM Student                     FROM Student&#10;    WHERE Sno LIKE ‘201215121';      WHERE Sno = ' 201215121 ';&#10;&#10;2️⃣ 查询所有姓刘学生的姓名、学号和性别。&#10;&#10;    SELECT Sname, Sno, Ssex&#10;    FROM Student&#10;    WHERE Sname LIKE '刘%';&#10;&#10;3️⃣ 查询姓&quot;欧阳&quot;且全名为三个汉字的学生的姓名。&#10;&#10;    SELECT Sname&#10;    FROM Student&#10;    WHERE Sname LIKE '欧阳__';&#10;&#10;4️⃣ 查询名字中第2个字为&quot;阳&quot;字的学生的姓名和学号。&#10;&#10;    SELECT Sname，Sno&#10;    FROM Student&#10;    WHERE Sname LIKE '__阳%';&#10;&#10;5️⃣ 查询所有不姓刘的学生姓名、学号和性别。&#10;&#10;    SELECT Sname, Sno, Ssex&#10;    FROM Student&#10;    WHERE Sname NOT LIKE '刘%';&#10;&#10;6️⃣ 查询以&quot;DB\_&quot;开头，且倒数第3个字符为 i的课程的详细情况。&#10;&#10;    SELECT *&#10;    FROM Course&#10;    WHERE Cname LIKE 'DB\_%i_ _' ESCAPE '\ ' ;&#10;    /*ESCAPE '＼' 表示“ ＼” 为换码字符*/">
        </outline>
        <outline text="5) 涉及空值" _note="谓词： IS NULL 或 IS NOT NULL&#10;&#10;“IS” 不能用 “=” 代替&#10;&#10;示例：某些学生选修课程后没有参加考试，所以有选课记录，但没有考试成绩。&#10;&#10;1️⃣ **查询缺少成绩的学生的学号和相应的课程号。**&#10;&#10;    SELECT Sno，Cno&#10;    FROM SC&#10;    WHERE Grade IS NULL&#10;&#10;2️⃣ **查所有有成绩的学生学号和课程号。**&#10;&#10;    SELECT Sno，Cno&#10;    FROM SC&#10;    WHERE Grade IS NOT NULL;">
        </outline>
        <outline text="6) 多重条件查询" _note="逻辑运算符：AND和 OR来连接多个查询条件&#10;&#10;&gt; AND的优先级高于OR&#10;&gt;&#10;&gt; 可以用括号改变优先级&#10;&#10;查询计算机系年龄在20岁以下的学生姓名&#10;&#10;    SELECT Sname&#10;    FROM Student&#10;    WHERE Sdept= 'SE' AND Sage&lt;20;">
        </outline>
      </outline>
      <outline text="6、ORDER BY子句" _note="可以按一个或多个属性列排序&#10;&#10;升序：ASC;降序：DESC;缺省值为升序&#10;&#10;示例：查询选修了3号课程的学生的学号及其成绩，查询结果按分数降序排列&#10;&#10;    SELECT Sno, Grade&#10;    FROM SC&#10;    WHERE Cno= ' 3 '&#10;    ORDER BY Grade DESC;">
      </outline>
      <outline text="7、聚集函数" _note="1️⃣ 统计元组个数&#10;&#10;    COUNT(*)&#10;&#10;2️⃣ 统计一列中值的个数&#10;&#10;    COUNT([DISTINCT|ALL] &lt;列名&gt;)&#10;&#10;3️⃣ 计算一列值的总和(此列必须为数值型)&#10;&#10;    SUM([DISTINCT|ALL] &lt;列名&gt;)&#10;&#10;4️⃣ 计算一列值的平均值(此列必须为数值型&#10;&#10;    AVG([DISTINCT|ALL] &lt;列名&gt;)&#10;&#10;5️⃣ 求一列中的最大值和最小值&#10;&#10;    MAX([DISTINCT|ALL] &lt;列名&gt;)&#10;    MIN([DISTINCT|ALL] &lt;列名&gt;)&#10;&#10;DISTINCT表示计算时要取消指定列中的重复值&#10;&#10;**举例**&#10;&#10;1️⃣ 查询学生总人数。&#10;&#10;    SELECT COUNT(*)&#10;    FROM Student;&#10;&#10;2️⃣ 查询选修了课程的学生人数。&#10;&#10;    SELECT COUNT(DISTINCT Sno)&#10;    FROM SC;&#10;&#10;3️⃣ 计算1号课程的学生平均成绩。&#10;&#10;    SELECT AVG(Grade)&#10;    FROM SC&#10;    WHERE Cno= ' 1 ';&#10;&#10;4️⃣ 查询选修1号课程的学生最高分数。&#10;&#10;    SELECT MAX(Grade)&#10;    FROM SC&#10;    WHERE Cno='1';">
      </outline>
      <outline text="8、GROUP BY 字句" _note="细化聚集函数的作用对象&#10;&#10;&gt; 如果未对查询结果分组，聚集函数将作用于整个查询结果&#10;&gt;&#10;&gt; 对查询结果分组后，聚集函数将分别作用于每个组&#10;&gt;&#10;&gt; 按指定的一列或多列值分组，值相等的为一组&#10;&#10;示例：&#10;&#10;查询平均成绩大于等于90分的学生学号和平均成绩&#10;&#10;下面的语句是不对的：&#10;&#10;    SELECT Sno, AVG(Grade)&#10;    FROM SC&#10;    WHERE AVG(Grade)&gt;=90&#10;    GROUP BY Sno;&#10;&#10;因为**WHERE子句中是不能用聚集函数作为条件表达式**&#10;&#10;正确的查询语句应该是：&#10;&#10;    SELECT Sno, AVG(Grade)&#10;    FROM SC&#10;    GROUP BY Sno&#10;    HAVING AVG(Grade)&gt;=90;&#10;&#10;HAVING短语与WHERE子句的区别：&#10;&#10;作用对象不同&#10;&#10;&gt; WHERE子句作用于基表或视图，从中选择满足条件的元组&#10;&gt;&#10;&gt; HAVING短语作用于**组，从中选择满足条件的组**">
      </outline>
    </outline>
    <outline text="连接查询">
      <outline text="1、等值连接" _note="等值连接：连接运算符为=&#10;&#10;查询每个学生及其选修课程的情况&#10;&#10;    SELECT Student.*, SC.*&#10;    FROM Student S, SC&#10;    WHERE S.Sno = SC.Sno;">
      </outline>
      <outline text="2、自然连接" _note="对上述例子用自然连接完成&#10;&#10;    SELECT Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade&#10;    FROM Student,SC&#10;    WHERE Student.Sno = SC.Sno；&#10;&#10;一条SQL语句可以同时完成选择和连接查询，这时WHERE子句是由连接谓词和选择谓词组成的复合条件&#10;&#10;查询选修2号课程且成绩在90分以上的所有学生的学号和姓名。&#10;&#10;    SELECT Student.Sno, Sname&#10;    FROM Student, SC&#10;    WHERE Student.Sno=SC.Sno AND&#10;    SC.Cno=' 2 ' AND SC.Grade&gt;90;&#10;&#10;执行过程:&#10;&#10;&gt; 先从SC中挑选出Cno='2'并且Grade&amp;gt;90的元组形成一个中间关系&#10;&gt;&#10;&gt; 再和Student中满足连接条件的元组进行连接得到最终的结果关系">
      </outline>
      <outline text="3、自连接" _note="自身连接：一个表与其自己进行连接需要给表**起别名**以示区别&#10;&#10;由于所有属性名都是同名属性，因此必须使用别名前缀&#10;&#10;示例：查询每一门课的间接先修课(即先修课的先修课)&#10;&#10;    SELECT C1.Cno, C2.Cpno&#10;    FROM Course C1, Course C2&#10;    WHERE C1.Cpno = C2.Cno;">
      </outline>
      <outline text="4、外连接" _note="    SELECT Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade&#10;    FROM Student LEFT OUT JOIN SC ON&#10;    (Student.Sno=SC.Sno);&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220125121748104.png)">
      </outline>
      <outline text="5、多表连接" _note="查询每个学生的学号、姓名、选修的课程名及成绩&#10;&#10;    SELECT Student.Sno, Sname, Cname, Grade&#10;    FROM Student S, SC, Course C /*多表连接*/&#10;    WHERE S.Sno = SC.Sno&#10;    AND SC.Cno = C.Cno;">
      </outline>
    </outline>
    <outline text="嵌套查询" _note="一个SELECT-FROM-WHERE语句称为一个查询块&#10;&#10;将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询&#10;&#10;    SELECT Sname&#10;    FROM Student&#10;    WHERE Sno IN&#10;    ( SELECT Sno&#10;    FROM SC&#10;    WHERE Cno= ' 2 ');&#10;&#10;子查询的限制：不能使用ORDER BY子句">
      <outline text="不相关子查询与相关子查询" _note="不相关子查询：子查询的查询条件不依赖于父查询&#10;&#10;&gt; 由里向外&#10;&gt; 逐层处理。即每个子查询在上一级查询处理之前求解，子查询的结果用于建立其父查询的查找条件。&#10;&#10;相关子查询：子查询的查询条件依赖于父查询。&#10;&#10;&gt; 首先取外层查询中表的第一个元组，根据它与内层查询相关的属性值处理内层查询，若WHERE子句返回值为真，则取此元组放入结果表。&#10;&gt;&#10;&gt; 然后再取外层表的下一个元组。&#10;&gt;&#10;&gt; 重复这一过程，直至外层表全部检查完为止">
      </outline>
      <outline text="带有IN谓词的子查询" _note="    SELECT Sno,Sname  /*3、最后在Student关系中取出Sno和Sname*/&#10;    FROM Student&#10;    WHERE Sno IN&#10;    	(SELECT Sno&#10;    	 FROM SC&#10;    	 WHERE Cno IN /*2、然后在SC关系中找出选修了3号课程的学生学号*/&#10;    		(SELECT Cno&#10;    		 FROM Course &#10;    		 WHERE Cname= '信息系统' /*1、首先在Course关系中找出“信息系统”的课程号，为3号*/&#10;    		 )&#10;    	);&#10;&#10;**也可以使用连接查询语句实现**&#10;&#10;    SELECT Sno,Sname&#10;    FROM Student,SC,Course&#10;    WHERE Student.Sno = SC.Sno AND&#10;    SC.Cno = Course.Cno AND&#10;    Course.Cname='信息系统';">
      </outline>
      <outline text="带有比较运算符的子查询" _note="找出每个学生超过他选修课程平均成绩的课程号。&#10;&#10;    SELECT Sno, Cno&#10;    FROM SC x&#10;    WHERE Grade &gt;=(SELECT AVG(Grade)&#10;    				FROM SC y&#10;    				WHERE y.Sno=x.Sno);">
      </outline>
      <outline text="带有ANY(SOME)或者ALL的子查询" _note="![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220130144339644.png)&#10;&#10;🏷 示例：查询非软件学院中比软件学院任意一个学生年龄小的学生姓名和年龄&#10;&#10;    SELECT Sname,Sage&#10;    FROM Student&#10;    WHERE Sage &lt; ANY (SELECT Sage&#10;    				  FROM Student&#10;    				  WHERE Sdept= ' SE ')&#10;    AND Sdept &lt;&gt; ‘SE ' ;&#10;&#10;🏷 用聚集函数实现&#10;&#10;    SELECT Sname,Sage&#10;    FROM Student&#10;    WHERE Sage &lt; (SELECT MAX(Sage)&#10;    			  FROM Student&#10;    			  WHERE Sdept= 'SE ')&#10;    AND Sdept &lt;&gt; ' SE ';">
      </outline>
      <outline text="带有EXISTS谓词的子查询" _note="**EXISTS谓词**&#10;&#10;存在量词&#10;&#10;带有EXISTS谓词的子查询不返回任何数据，只产生逻辑真值“true”或逻辑假值“false”。&#10;&#10;&gt; 若内层查询结果非空，则外层的WHERE子句返回真值&#10;&gt;&#10;&gt; 若内层查询结果为空，则外层的WHERE子句返回假值&#10;&#10;由EXISTS引出的子查询，其目标列表达式**通常都用 \***&#10;，因为带EXISTS的子查询只返回真值或假值，给出列名无实际意义。&#10;&#10;**NOT EXISTS谓词**&#10;&#10;&gt; 若内层查询结果非空，则外层的WHERE子句返回假值&#10;&gt;&#10;&gt; 若内层查询结果为空，则外层的WHERE子句返回真值&#10;&#10;🏷 示例：查询没有选修1号课程的学生姓名。&#10;&#10;    SELECT Sname&#10;    FROM Student&#10;    WHERE NOT EXISTS&#10;    	  (SELECT *&#10;    	   FROM SC&#10;    	   WHERE Sno = Student.Sno AND Cno='1');&#10;&#10;不同形式的查询间的替换&#10;&#10;一些带EXISTS或NOT EXISTS谓词的子查询不能被其他形式的子查询等价替换&#10;&#10;所有带IN谓词、比较运算符、ANY和ALL谓词的子查询都能用带EXISTS谓词的子查询等价替换&#10;&#10;**用EXISTS/NOT EXISTS实现逻辑蕴涵(难点)**&#10;&#10;SQL语言中没有蕴涵(Implication)逻辑运算&#10;&#10;可以利用**谓词演算**将逻辑蕴涵谓词等价转换为:&#10;$(\\forall y)p\\rightarrow q=\\exists y(p\\and \\lnot q)$&#10;&#10;示例：查询至少选修了学生201215122选修的全部课程的学生号码。&#10;&#10;解题思路&#10;&#10;用逻辑蕴涵表达：查询学号为x的学生，对所有的课程y，只要201215122学生选修了课程y，则x也选修了y。形式化表示：用P表示谓词&#10;“学生201215122选修了课程y”用q表示谓词 “学生x选修了课程y”则上述查询为:&#10;&#10;变换后语义：**不存在这样的课程y，学生201215122选修了y，而学生x没有选。**&#10;&#10;用NOT EXISTS谓词表示：&#10;&#10;    SELECT DISTINCT Sno&#10;    FROM SC SCX&#10;    WHERE NOT EXISTS&#10;    	(SELECT *&#10;    	FROM SC SCY&#10;    	WHERE SCY.Sno = ' 201215122 ' AND&#10;    	NOT EXISTS&#10;    		(SELECT *&#10;    		 FROM SC SCZ&#10;    		 WHERE SCZ.Sno=SCX.Sno AND&#10;    		 SCZ.Cno=SCY.Cno)&#10;    	);">
      </outline>
    </outline>
    <outline text="集合查询" _note="集合操作的种类&#10;&#10;&gt; 并操作UNION&#10;&gt;&#10;&gt; 交操作INTERSECT&#10;&gt;&#10;&gt; 差操作EXCEPT&#10;&#10;参加集合操作的各查询结果的列数必须相同;对应项的数据类型也必须相同&#10;&#10;🏷 示例1：查询软件学院的学生及年龄不大于19岁的学生&#10;&#10;    SELECT *&#10;    FROM Student&#10;    WHERE Sdept= 'SE'&#10;    UNION&#10;    SELECT *&#10;    FROM Student&#10;    WHERE Sage&lt;=19;&#10;&#10;&gt; UNION：将多个查询结果合并起来时，系统自动去掉重复元组&#10;&gt;&#10;&gt; UNION ALL：将多个查询结果合并起来时，保留重复元组&#10;&#10;🏷 示例2：查询既选修了课程1又选修了课程2的学生。&#10;&#10;    SELECT Sno&#10;    FROM SC&#10;    WHERE Cno=' 1 '&#10;    INTERSECT&#10;    SELECT Sno&#10;    FROM SC&#10;    WHERE Cno='2 ';">
    </outline>
    <outline text="基于派生表的查询" _note="子查询不仅可以出现在WHERE子句中，还可以出现在FROM子句中，这时子查询生成的临时派生表(Derived&#10;Table)成为主查询的查询对象&#10;&#10;示例：找出每个学生超过他自己选修课程平均成绩的课程号&#10;&#10;    SELECT Sno, Cno&#10;    FROM SC, (SELECTSno, Avg(Grade)&#10;    		  FROM SC &#10;    		  GROUP BY Sno) AS Avg_sc(avg_sno,avg_grade)//取别名&#10;    WHERE SC.Sno = Avg_sc.avg_sno&#10;    		AND SC.Grade &gt;=Avg_sc.avg_grade">
    </outline>
    <outline text="总结【重点】" _note="    SELECT [ALL|DISTINCT]&#10;    &lt;目标列表达式&gt; [别名] [ ,&lt;目标列表达式&gt; [别名]] …&#10;    FROM &lt;表名或视图名&gt; [别名][ ,&lt;表名或视图名&gt; [别名]] …|(&lt;SELECT语句&gt;)[AS]&lt;别名&gt;&#10;    [WHERE &lt;条件表达式&gt;]&#10;    [GROUP BY &lt;列名1&gt;[HAVING&lt;条件表达式&gt;]]&#10;    [ORDER BY &lt;列名2&gt; [ASC|DESC]];">
      <outline text="目标表达式格式" _note="\(1\) \*&#10;&#10;\(2\) &amp;lt;表名&amp;gt;.\*&#10;&#10;\(3\) COUNT(\[DISTINCT|ALL\]\* )&#10;&#10;\(4\)&#10;\[&amp;lt;表名&amp;gt;.\]&amp;lt;属性列名表达式&amp;gt;\[,&amp;lt;表名&amp;gt;.\]&amp;lt;属性列名表达式&amp;gt;\]…&#10;&#10;其中&amp;lt;属性列名表达式&amp;gt;可以是由属性列、作用于属性列的聚集函数和常量的任意算术运算(+，-，\*，/)组成的运算公式">
      </outline>
      <outline text="聚集表达式格式" _note="">
      </outline>
      <outline text="WHERE子句的条件表达式的可选格式" _note="&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220130150726953.png &quot;fig:&quot;)">
      </outline>
    </outline>
  </outline>
  <outline text="四、数据更新">
    <outline text="插入数据">
      <outline text="插入元组" _note="**语句格式**&#10;&#10;    INSERT&#10;    INTO &lt;表名&gt; [(&lt;属性列1&gt;[,&lt;属性列2 &gt;…)] VALUES (&lt;常量1&gt; [,&lt;常量2&gt;]… );&#10;&#10;**功能**&#10;&#10;&gt; 将新元组插入指定表中&#10;&#10;**INTO子句**&#10;&#10;&gt; 指定要插入数据的表名及属性列&#10;&gt;&#10;&gt; 属性列的顺序可与表定义中的顺序不一致&#10;&gt;&#10;&gt; 没有指定属性列：表示要插入的是一条完整的元组，且&#10;&gt; 属性列属性与表定义中的顺序一致&#10;&gt;&#10;&gt; 指定部分属性列：插入的元组在其余属性列上取空值&#10;&#10;**VALUES子句**&#10;&#10;提供的值必须与INTO子句匹配&#10;&#10;&gt; 值的个数&#10;&gt;&#10;&gt; 值的类型&#10;&#10;🏷&#10;示例：将一个新学生元组(学号：201215128;姓名：陈冬;性别：男;所在系：IS;年龄：18岁)插入到Student表中。&#10;&#10;    INSERT&#10;    INTO  Student (Sno,Sname,Ssex,Sdept,Sage) VALUES ('201215128','陈冬','男','IS',18);">
      </outline>
      <outline text="插入子查询" _note="语句格式&#10;&#10;    INSERT&#10;    INTO &lt;表名&gt; [(&lt;属性列1&gt; [,&lt;属性列2&gt;…   )]&#10;    子查询;&#10;&#10;INTO子句&#10;&#10;子查询&#10;&#10;&gt; SELECT子句目标列必须与INTO子句匹配&#10;&gt;&#10;&gt; 值的个数&#10;&gt;&#10;&gt; 值的类型&#10;&#10;🏷 示例: **对每一个系**，求学生的平均年龄，并把结果存入数据库&#10;&#10;1️⃣ 第一步：建表&#10;&#10;    CREATE TABLE   Dept_age&#10;    ( Sdept  CHAR(15)&#10;      Avg_age SMALLINT);&#10;&#10;2️⃣ 第二步：插入数据&#10;&#10;    INSERT&#10;    INTO Dept_age(Sdept,Avg_age) SELECT Sdept，AVG(Sage) FROM Student&#10;    GROUP BY Sdept;&#10;&#10;关系数据库管理系统在执行插入语句时会**检查所插元组是否破坏表上已定义的完整性规则**&#10;&#10;&gt; 实体完整性&#10;&gt;&#10;&gt; 参照完整性&#10;&gt;&#10;&gt; 用户定义的完整性&#10;&gt;&#10;&gt; &gt; NOT NULL约束&#10;&gt; &gt;&#10;&gt; &gt; UNIQUE约束&#10;&gt; &gt;&#10;&gt; &gt; 值域约束">
      </outline>
    </outline>
    <outline text="修改数据" _note="**语句格式**&#10;&#10;    UPDATE &lt;表名&gt;&#10;    SET &lt;列名&gt;=&lt;表达式&gt;[,&lt;列名&gt;=&lt;表达式&gt;]… [WHERE &lt;条件&gt;];&#10;&#10;**功能**&#10;&#10;&gt; 修改指定表中满足WHERE子句条件的元组&#10;&gt;&#10;&gt; SET子句给出&amp;lt;表达式&amp;gt;的值用于取代相应的属性列&#10;&gt;&#10;&gt; 如果省略WHERE子句，表示要修改表中的所有元组">
      <outline text="修改某一个元组的值" _note="示例：将学生201215121的年龄改为22岁&#10;&#10;    UPDATE Student SET Sage=22&#10;    WHERE  Sno=' 201215121 ';">
      </outline>
      <outline text="修改多个元组的值" _note="示例：将所有学生的年龄增加1岁&#10;&#10;    UPDATE Student&#10;    SET Sage= Sage+1;">
      </outline>
      <outline text="带子查询的修改语句" _note="示例：将计算机科学系全体学生的成绩置零。&#10;&#10;    UPDATE SC&#10;    SET Grade=0 WHERE Sno IN&#10;    (SELETE Sno&#10;     FROM   Student&#10;     WHERE  Sdept= 'CS' );">
      </outline>
    </outline>
    <outline text="删除数据" _note="**语句格式**&#10;&#10;    DELETE FROM&#10;    &lt;表名&gt;&#10;    [WHERE &lt;条件&gt;];&#10;&#10;**功能**&#10;&#10;&gt; 删除指定表中满足WHERE子句条件的元组&#10;&gt;&#10;&gt; WHERE子句&#10;&gt;&#10;&gt; 指定要删除的元组&#10;&gt;&#10;&gt; 缺省表示要删除表中的全部元组，表的定义仍在字 典中">
      <outline text="删除某一个元组的值" _note="示例：删除学号为201215128的学生记录。&#10;&#10;    DELETE&#10;    FROM Student&#10;    WHERE Sno= 201215128 ';">
      </outline>
      <outline text="删除多个元组的值" _note="示例：删除所有的学生选课记录。&#10;&#10;    DELETE&#10;    FROM SC;">
      </outline>
      <outline text="带子查询的删除语句" _note="示例：删除计算机科学系所有学生的选课记录。&#10;&#10;    DELETE FROM  SC&#10;    WHERE  Sno IN&#10;    (SELETE Sno&#10;     FROM   Student &#10;     WHERE  Sdept= 'CS') ;">
      </outline>
    </outline>
  </outline>
  <outline text="五、视图【了解】" _note="视图的**特点**&#10;&#10;&gt; 是从一个或几个基本表(或视图)导出的“虚表”。&#10;&gt;&#10;&gt; 只存放视图的定义，不存放视图对应的数据。&#10;&gt;&#10;&gt; 基表中的数据发生变化，从视图中查询出的数据也 随之改变。&#10;&#10;视图的**作用**&#10;&#10;&gt; 视图能够简化用户的操作&#10;&gt;&#10;&gt; 视图使用户能以多种角度看待同一数据&#10;&gt;&#10;&gt; 视图对重构数据库提供了一定程度的逻辑独立性&#10;&gt;&#10;&gt; 视图能够对机密数据提供安全保护&#10;&gt;&#10;&gt; 适当的利用视图可以更清晰的表达查询">
    <outline text="建立视图" _note="**语句格式**&#10;&#10;    CREATE VIEW&#10;    &lt;视图名&gt;   [(&lt;列名&gt; [,&lt;列名&gt;]…)] AS &lt;子查询&gt;&#10;    [WITH  CHECK OPTION];&#10;&#10;&gt; WITH CHECK OPTION&#10;&gt;&#10;&gt; &gt; 对视图进行UPDATE，INSERT和DELETE操作时要保证更新、插入或删除的行满足视图定义中的谓词条件(即子查询中的条件表达式)&#10;&gt;&#10;&gt; 子查询可以是任意的SELECT语句，是否可以含 有ORDER&#10;&gt; BY子句和DISTINCT短语，则决定具体系统的实现。&#10;&gt;&#10;&gt; 组成视图的属性列名：全部省略或全部指定&#10;&gt;&#10;&gt; 关系数据库管理系统执行CREATE VIEW语句时&#10;&gt; 只是把视图定义存入数据字典，并不执行其中的 SELECT语句。&#10;&gt;&#10;&gt; 在对视图查询时，按视图的定义从基本表中将数 据查出。&#10;&#10;示例：建立信息系学生的视图，并要求进行修改和插入操作时仍需保证该视图只有信息系的学生。&#10;&#10;    CREATE VIEW IS_Student AS&#10;    SELECT Sno,Sname,Sage FROM   Student&#10;    WHERE  Sdept= 'IS';&#10;    WITH CHECK OPTION;&#10;&#10;🏷 定义IS\_Student 视图时加上了WITH CHECK&#10;OPTION子句，对该视图进行插入、修改和删除操作时，RDBMS会自动加上Sdept='IS'的条件。&#10;&#10;&gt; 若一个视图是从单个基本表导出的，并且只是去掉了基本表的某些行和某些列，但保留了主码，我们称这类视图为行列子集视图。&#10;&gt;&#10;&gt; IS\_Student视图就是一个行列子集视图。&#10;&#10;**基于多个基表的视图**&#10;&#10;示例：建立信息系选修了1号课程的学生的视图(包括学号、姓名、成绩)。&#10;&#10;    CREATE VIEW IS_S1(Sno,Sname,Grade) AS&#10;    SELECT Student.Sno,Sname,Grade FROM   Student,SC&#10;    WHERE  Sdept= 'IS' AND&#10;    Student.Sno=SC.Sno AND SC.Cno= '1';&#10;&#10;**基于视图的视图**&#10;&#10;示例：建立信息系选修了1号课程且成绩在90分以上的学生的视图。&#10;&#10;    CREATE VIEW IS_S2 AS&#10;    SELECT Sno,Sname,Grade FROM   IS_S1&#10;    WHERE  Grade&gt;=90;&#10;&#10;**带表达式的视图**&#10;&#10;示例：定义一个反映学生出生年份的视图。&#10;&#10;    CREATE VIEW BT_S(Sno,Sname,Sbirth) AS&#10;    SELECT Sno,Sname,2014-Sage FROM  Student;&#10;&#10;**分组视图**&#10;&#10;示例： 将学生的学号及平均成绩定义为一个视图&#10;&#10;    CREAT VIEW S_G(Sno,Gavg)&#10;    AS&#10;    SELECT Sno,AVG(Grade) FROM SC&#10;    GROUP BY Sno;">
    </outline>
    <outline text="删除视图" _note="**语句的格式**&#10;&#10;    DROP VIEW &lt;视图名&gt;[CASCADE];&#10;&#10;&gt; 该语句从数据字典中删除指定的视图定义&#10;&gt;&#10;&gt; 如果该视图上还导出了其他视图，使用CASCADE级&#10;&gt; 联删除语句，把该视图和由它导出的所有视图一起删 除&#10;&gt;&#10;&gt; 删除基表时，由该基表导出的所有视图定义都必须显 式地使用DROP&#10;&gt; VIEW语句删除">
      <outline text="查询视图、更新视图" _note="用户角度：查询与更新视图与查询更新基本表相同">
      </outline>
    </outline>
  </outline>
  <outline text="六、嵌入式SQL" _note="SQL语言提供了两种不同的使用方式&#10;&#10;&gt; 交互式(isql)&#10;&gt;&#10;&gt; 嵌入式(esql)&#10;&#10;为什么要引入嵌入式SQL&#10;&#10;&gt; SQL语言是非过程性语言&#10;&gt;&#10;&gt; 事务处理应用需要高级语言&#10;&#10;这两种方式细节上有差别，在程序设计的环境下，SQL语句要做某些必要的扩充">
    <outline text="嵌入式SQL的处理过程" _note="**主语言**&#10;&#10;&gt; 嵌入式SQL是将SQL语句嵌入程序设计语言中，被嵌入的程序设计语言，如C、C++、Java，称为宿主语言，简称主语言。&#10;&#10;**处理过程**&#10;&#10;&gt; 预编译方法&#10;&#10;为了**区分SQL语句与主语言语句，所有SQL语句必须加前缀EXEC SQL，**&#10;&#10;主语言为C语言时，语句格式：EXEC SQL &amp;lt;SQL语句&amp;gt;;">
    </outline>
    <outline text="嵌入式SQL语句与主语言之间的通信" _note="**数据库工作单元与源程序工作单元之间的通信**&#10;&#10;&gt; 向主语言传递SQL语句的执行状态信息，使主语言能够据此控制程序流程，主要用**SQL通信区（SQLCA）**实现&#10;&gt;&#10;&gt; **主语言向SQL语句提供参数，主要用主变量实现**&#10;&gt;&#10;&gt; 将SQL语句查询数据库的结果交主语言处理，主要用主变量和游标实现&#10;&#10;**SQLCA： SQL Communication Area**&#10;&#10;&gt; 🏷 SQLCA是一个数据结构&#10;&gt;&#10;&gt; 🏷 SQLCA的用途&#10;&gt;&#10;&gt; &gt; SQL语句执行后，系统反馈给应用程序信息：描述系统当前工作状态;描述运行环境&#10;&gt; &gt;&#10;&gt; &gt; 这些信息将送到SQL通信区中&#10;&gt; &gt;&#10;&gt; &gt; 应用程序从SQL通信区中取出这些状态信息，据此决定接下来执行的语句&#10;&gt;&#10;&gt; 🏷 定义SQLCA&#10;&gt;&#10;&gt; &gt; 用EXEC SQL INCLUDE SQLCA定义&#10;&gt;&#10;&gt; 🏷 使用SQLCA&#10;&gt;&#10;&gt; &gt; SQLCA中有一个存放每次执行SQL语句后返回代码的变量SQLCODE&#10;&gt; &gt;&#10;&gt; &gt; 如果SQLCODE等于预定义的常量SUCCESS，则表示SQL语句成功，否则表示出错&#10;&gt; &gt;&#10;&gt; &gt; 应用程序每执行完一条SQL&#10;&gt; &gt; 语句之后都应该测试一下SQLCODE的值，以了解该SQL语句执行情况并做相应处理&#10;&#10;**主变量**&#10;&#10;&gt; 嵌入式SQL语句中可以使用主语言的程序变量来输入或输出数据&#10;&gt;&#10;&gt; 在SQL语句中使用的主语言程序变量简称为主变量（Host Variable）&#10;&#10;**指示变量**&#10;&#10;&gt; 是一个整型变量，用来“指示”**所指主变量的值或条**件&#10;&gt;&#10;&gt; 一个主变量可以附带一个指示变量（Indicator Variable）&#10;&gt;&#10;&gt; 指示变量的用途&#10;&gt;&#10;&gt; &gt; 指示输入主变量是否为空值&#10;&gt; &gt;&#10;&gt; &gt; 检测输出变量是否为空值，值是否被截断&#10;&#10;**游标**&#10;&#10;&gt; 游标是系统为用户开设的一个数据缓冲区，存放SQL语句的执行结果。&#10;&gt;&#10;&gt; 每个游标都有一个名字。&#10;&gt;&#10;&gt; 用户可以用SQL语句逐一从游标中获取记录，并赋给主变量，交由主语言进一步处理。">
    </outline>
    <outline text="SQL语句类别" _note="不用游标的SQL语句的种类&#10;&#10;&gt; 说明性语句&#10;&gt;&#10;&gt; 数据定义语句&#10;&gt;&#10;&gt; 数据控制语句&#10;&gt;&#10;&gt; 查询结果为单记录的SELECT语句&#10;&gt;&#10;&gt; 非CURRENT形式的增删改语句&#10;&#10;使用游标的SQL语句&#10;&#10;&gt; 必须使用游标的SQL语句&#10;&gt;&#10;&gt; 查询结果为多条记录的SELECT语句&#10;&gt;&#10;&gt; CURRENT形式的UPDATE语句&#10;&gt;&#10;&gt; CURRENT形式的DELETE语句&#10;&#10;动态SQL&#10;&#10;&gt; 静态嵌入式SQL&#10;&gt;&#10;&gt; &gt; 静态嵌入式SQL语句能够满足一般要求&#10;&gt; &gt;&#10;&gt; &gt; 无法满足要到执行时才能够确定要提交的SQL语句、查询的条件&#10;&gt;&#10;&gt; 动态嵌入式SQL&#10;&gt;&#10;&gt; &gt; 允许在程序运行过程中临时“组装”SQL语句&#10;&gt; &gt;&#10;&gt; &gt; 支持动态组装SQL语句和动态参数两种形式">
    </outline>
  </outline>
  <outline text="七、书本习题与解答" _note="![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220130153813357.png)&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220130153819729.png)&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220130153830383.png)&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220130153839251.png &quot;fig:&quot;)  &#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220130153851181.png &quot;fig:&quot;)&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220130153901306.png)&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220130153909515.png)&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220130153922355.png)&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220130153931787.png)">
  </outline>
  <outline text="八、课后习题答案" _note="![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220130154020830.png)&#10;&#10;![](https://gitee.com/yi-junquan/image_gitee/raw/master/images/image-20220130154037609.png)">
  </outline>
</outline>
  </body>
</opml>
